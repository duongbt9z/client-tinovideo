const helpTranslations = {
  "vi": {
    "nav-settings": "C√†i ƒê·∫∑t ",
    "tinovideo": "Tinovideo",
    "nav-create": "T·∫°o Video M·ªõi",
    "nav-templates": "Edit Video",
    "nav-affiliate": "Affiliate",
    "nav-help": "Tr·ª£ gi√∫p",
    "help-title": "Trung t√¢m tr·ª£ gi√∫p",
    "help-subtitle": "T√¨m c√¢u tr·∫£ l·ªùi cho m·ªçi th·∫Øc m·∫Øc c·ªßa b·∫°n",
    "help-search": "üîç T√¨m ki·∫øm c√¢u h·ªèi, h∆∞·ªõng d·∫´n...",
    "tab-faq": "‚ùì C√¢u h·ªèi th∆∞·ªùng g·∫∑p",
    "tab-video": "üìΩÔ∏è Video h∆∞·ªõng d·∫´n",
    "tab-docs": "üìÑ T√†i li·ªáu",
    "tab-contact": "üí¨ Li√™n h·ªá",
    "filter-all": "T·∫•t c·∫£",
    "filter-start": "B·∫Øt ƒë·∫ßu",
    "filter-feature": "T√≠nh nƒÉng",
    "filter-edit": "Ch·ªânh s·ª≠a",
    "filter-export": "Xu·∫•t video",
    "filter-payment": "Thanh to√°n",
    "filter-support": "H·ªó tr·ª£",
    "faq-q1": "L√†m th·∫ø n√†o ƒë·ªÉ t·∫°o video t·ª´ URL s·∫£n ph·∫©m?",
    "faq-a1": "B·∫°n ch·ªâ c·∫ßn d√°n URL s·∫£n ph·∫©m v√†o √¥ t·∫°o video, h·ªá th·ªëng s·∫Ω t·ª± ƒë·ªông tr√≠ch xu·∫•t th√¥ng tin ƒë·ªÉ d·ª±ng video.",
    "faq-q2": "C√≥ bao nhi√™u gi·ªçng ƒë·ªçc AI kh√°c nhau?",
    "faq-a2": "Hi·ªán t·∫°i c√≥ h∆°n 20 gi·ªçng ƒë·ªçc AI kh√°c nhau, bao g·ªìm c·∫£ ti·∫øng Vi·ªát v√† c√°c ng√¥n ng·ªØ kh√°c.",
    "faq-q3": "Video c√≥ th·ªÉ xu·∫•t ·ªü nh·ªØng ƒë·ªãnh d·∫°ng n√†o?",
    "faq-a3": "H·ªá th·ªëng h·ªó tr·ª£ xu·∫•t video ·ªü ƒë·ªãnh d·∫°ng MP4 (1080x1920) ph√π h·ª£p v·ªõi TikTok, Reels v√† Shorts.",
    "faq-q4": "T√¥i c√≥ th·ªÉ ch·ªânh s·ª≠a video sau khi t·∫°o kh√¥ng?",
    "faq-a4": "C√≥, b·∫°n c√≥ th·ªÉ ch·ªânh s·ª≠a vƒÉn b·∫£n, ·∫£nh v√† hi·ªáu ·ª©ng sau khi t·∫°o video.",
    "faq-q5": "G√≥i mi·ªÖn ph√≠ c√≥ gi·ªõi h·∫°n g√¨?",
    "faq-a5": "G√≥i mi·ªÖn ph√≠ ƒë∆∞·ª£c gi·ªõi h·∫°n s·ªë l∆∞·ª£ng video t·∫°o m·ªói ng√†y v√† kh√¥ng c√≥ quy·ªÅn truy c·∫≠p v√†o gi·ªçng ƒë·ªçc cao c·∫•p.",
    "faq-q6": "L√†m sao ƒë·ªÉ li√™n h·ªá h·ªó tr·ª£?",
    "faq-a6": "B·∫°n c√≥ th·ªÉ li√™n h·ªá qua m·ª•c 'Li√™n h·ªá' tr√™n trang ho·∫∑c g·ª≠i email ƒë·∫øn support@yourapp.com.",
    "contact-chat": "Chat tr·ª±c ti·∫øp",
    "contact-email": "Email",
    "contact-hotline": "Hotline",
    "doc-guide": "H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng",
    "doc-api": "API Documentation",
    "doc-practice": "Best Practices"
  },
  "en": {
       "nav-settings": "Settings ",
    "tinovideo": "Tinovideo",
    "nav-create": "Create New Video",
    "nav-templates": "Edit Video",
    "nav-affiliate": "Affiliate",
     "nav-help": "help",
     
    "help-title": "Help Center",
    "help-subtitle": "Find answers to all your questions",
    "help-search": "üîç Search questions, guides...",
    "tab-faq": "‚ùì FAQs",
    "tab-video": "üìΩÔ∏è Video Tutorials",
    "tab-docs": "üìÑ Documentation",
    "tab-contact": "üí¨ Contact",
    "filter-all": "All",
    "filter-start": "Getting Started",
    "filter-feature": "Features",
    "filter-edit": "Editing",
    "filter-export": "Export",
    "filter-payment": "Payment",
    "filter-support": "Support",
    "faq-q1": "How to create a video from product URL?",
    "faq-a1": "Just paste the product URL into the create box, the system will automatically extract info and build the video.",
    "faq-q2": "How many AI voices are available?",
    "faq-a2": "There are over 20 AI voices including Vietnamese and other languages.",
    "faq-q3": "What formats can I export video in?",
    "faq-a3": "Videos can be exported as MP4 (1080x1920), perfect for TikTok, Reels, and Shorts.",
    "faq-q4": "Can I edit a video after creating it?",
    "faq-a4": "Yes, you can edit text, images, and effects after video creation.",
    "faq-q5": "Are there limitations on free plan?",
    "faq-a5": "Free plan limits daily video creations and doesn‚Äôt allow premium AI voices.",
    "faq-q6": "How can I contact support?",
    "faq-a6": "You can use the 'Contact' tab or email support@yourapp.com.",
    "contact-chat": "Live Chat",
    "contact-email": "Email",
    "contact-hotline": "Hotline",
    "doc-guide": "User Guide",
    "doc-api": "API Documentation",
    "doc-practice": "Best Practices"
  }
};
function toggleSidebar() {
  const sidebar = document.getElementById("sidebar");
  if (sidebar) {
    sidebar.style.display = "none"; 
  }
}
function switchLanguage(lang) {
  localStorage.setItem('tinovideo-language', lang);
  const t = helpTranslations[lang];
   document.querySelectorAll('.lang-btn').forEach(btn => {
     if (btn.dataset.lang === lang) {
            btn.style.display = 'none'; // ·∫©n n√∫t hi·ªán t·∫°i
        } else {
            btn.style.display = 'inline-block'; // hi·ªán n√∫t c√≤n l·∫°i
        }
        btn.classList.remove('active');
        if (btn.dataset.lang === lang) {
            btn.classList.add('active');
        }
    });
  document.querySelectorAll('[data-key]').forEach(el => {
    const key = el.getAttribute('data-key');
    if (!t[key]) return;

    // if (el.tagName === 'INPUT') {
    //   el.placeholder = t[key];
    // } else {
    //   el.textContent = t[key];
    // }
  });
}

window.addEventListener("DOMContentLoaded", () => {
  const savedLang = localStorage.getItem('tinovideo-language') || 'vi';
  switchLanguage(savedLang);
});

   const faqItems = document.querySelectorAll('.faq-item');
    const filterButtons = document.querySelectorAll('.filter');
    const searchInput = document.getElementById('searchInput');

    searchInput.addEventListener('input', () => {
        const keyword = searchInput.value.toLowerCase().trim();

        // N·∫øu kh√¥ng nh·∫≠p g√¨ ‚Üí hi·ªán l·∫°i t·∫•t c·∫£
        if (keyword === "") {
            faqItems.forEach(item => item.style.display = 'block');
            return;
        }

        faqItems.forEach(item => {
            const question = item.querySelector('.faq-question').textContent.toLowerCase();
            const answer = item.querySelector('.faq-answer').textContent.toLowerCase();
            const match = question.includes(keyword) || answer.includes(keyword);
            item.style.display = match ? 'block' : 'none';
        });

    });


    filterButtons.forEach((btn, index) => {
        btn.addEventListener('click', () => {
            // C·∫≠p nh·∫≠t n√∫t ƒëang active
            filterButtons.forEach(b => b.classList.remove('active'));
            btn.classList.add('active');

            if (btn.textContent.trim() === "T·∫•t c·∫£") {
                // Hi·ªÉn th·ªã t·∫•t c·∫£
                faqItems.forEach(item => item.style.display = 'block');
            } else {
                // Hi·ªÉn th·ªã ƒë√∫ng 1 c√¢u h·ªèi t∆∞∆°ng ·ª©ng
                faqItems.forEach((item, i) => {
                    item.style.display = (i === index - 1) ? 'block' : 'none';
                });
            }
        });
    });
    function toggleFAQ(clickedItem) {
        // ƒê√≥ng t·∫•t c·∫£ m·ª•c ƒëang m·ªü
        document.querySelectorAll('.faq-item').forEach(item => {
            if (item !== clickedItem) {
                item.classList.remove('active');
            }
        });

        // Toggle m·ª•c v·ª´a b·∫•m
        clickedItem.classList.toggle('active');
    }

    const tabs = document.querySelectorAll('.tab');
    const sections = {
        'tab-faq': document.getElementById('faq-section'),
        'tab-video': document.getElementById('video-section'),
        'tab-docs': document.getElementById('docs-section'),
        'tab-contact': document.getElementById('contact-section')
    };

    tabs.forEach(tab => {
        tab.addEventListener('click', () => {
            // remove active on all tabs
            tabs.forEach(t => t.classList.remove('active'));
            tab.classList.add('active');

            // hide all sections
            Object.values(sections).forEach(sec => sec.style.display = 'none');

            // show current
            const sectionId = tab.id;
            const showSection = sections[sectionId];
            if (showSection) {
                showSection.style.display = (sectionId === 'tab-contact') ? 'flex' : 'block';
            }
        });
    });
    const btn = document.getElementById("sidebar-toggle");
    const sidebar = document.getElementById("sidebar");

    btn.addEventListener("click", () => {
        if (sidebar.style.display === "none") {
            sidebar.style.display = "block"; // Ho·∫∑c "flex", t√πy b·∫°n mu·ªën hi·ªán nh∆∞ th·∫ø n√†o
        } else {
            sidebar.style.display = "none";
        }
    });
    let cachedUser = null;
    const API_BASE_URL = 'https://admin.tinovideo.com';
    function fillDataUser(user) {
        const nameDiv = document.querySelector('[data-key="user-name"]');
        if (nameDiv) nameDiv.textContent = user.name;

        const point = document.querySelector('[data-key="point"]');
        if (point) point.textContent = user.point;

        const avatarImg = document.querySelector('[data-key="user-avatar"]');
        if (avatarImg) avatarImg.src = user.avatar;

        const userPlan = document.querySelector('[data-key="user-plan"]');
        // if (userPlan) userPlan.textContent = user.plan || "Ch∆∞a c√≥ g√≥i";
        const claimedPlans = [
            user.free_claimed && "Free",
            user.standard_claimed && "Standard",
            user.pro_claimed && "Pro",
            user.max_claimed && "Max"
        ].filter(Boolean);

        let highestPlan = "Ch∆∞a c√≥ g√≥i";
        const PLAN_PRIORITY = ["Max", "Pro", "Standard", "Free"];
        for (const plan of PLAN_PRIORITY) {
            if (claimedPlans.includes(plan)) {
                highestPlan = plan;
                break;
            }
        }

        if (userPlan) userPlan.textContent = user.role;
        const userMoney = document.querySelector('[data-key="user-money"]');
        if (userMoney) if (!user.money) {
            userMoney.textContent = "Ch∆∞a c√≥ hoa h·ªìng";
        } else {
            userMoney.textContent = user.money + ".000 VNƒê";
        }
        const userShare = document.querySelector('[data-key="user-share"]');
        if (userShare) userShare.textContent = user.user_share + " Ng∆∞·ªùi" || "Ch∆∞a c√≥ ng∆∞·ªùi gi·ªõi thi·ªáu ";
        // console.log("‚úÖ User ƒë√£ fill:", user);
    }

    async function getUserInfoOnce() {
        if (cachedUser) return cachedUser;

        const authData = localStorage.getItem("auth_data");
        if (authData) {
            cachedUser = JSON.parse(authData);
            fillDataUser(cachedUser);  // ‚úÖ g·ªçi ƒë√∫ng
            return cachedUser;
        }

        const token = localStorage.getItem("jwt");
        if (!token) return null;

        try {
            const res = await fetch(`${API_BASE_URL}/api/user`, {
                method: "GET",
                headers: { Authorization: `Bearer ${token}` }
            });
            const data = await res.json();
            if (data.success) {
                cachedUser = data.user;
                localStorage.setItem("auth_data", JSON.stringify(data.user));
                fillDataUser(cachedUser);  // ‚úÖ truy·ªÅn ƒë√∫ng user
                return cachedUser;
            } else {
                console.warn("‚ùå Kh√¥ng l·∫•y ƒë∆∞·ª£c th√¥ng tin user:", data.error);
                return null;
            }
        } catch (err) {
            console.error("‚ùå L·ªói k·∫øt n·ªëi:", err);
            return null;
        }
    }
    document.querySelectorAll('.tab').forEach(btn => {
        btn.addEventListener('click', () => {
            document.querySelectorAll('.tab').forEach(t => t.classList.remove('active'));
            document.querySelectorAll('.tab-content').forEach(c => c.classList.remove('active'));
            btn.classList.add('active');
            document.getElementById(btn.dataset.tab).classList.add('active');
        });
    });

    window.addEventListener("DOMContentLoaded", async () => {
        const user = await getUserInfoOnce();
        if (user) {
            // Sau khi fill xong th√¨ l∆∞u userId ƒë·ªÉ chia s·∫ª link
            localStorage.setItem("userId", user.id);
        }
        const upgradeBtn = document.querySelector(".upgrade-btn");
        if (upgradeBtn) {
            upgradeBtn.addEventListener("click", () => {
                window.location.href = "subscribe.html";
            });
        }
    }); const token = localStorage.getItem('jwt');
    if (!token) {
        window.location.href = "index.html";
    } else {
        // G·ª≠i request x√°c th·ª±c token
        fetch(`${API_BASE_URL}/api/user`, {
            method: 'GET',
            headers: {
                'Authorization': `Bearer ${token}`
            }
        })
            .then(res => res.json())
            .then(data => {
                if (!data.success) {
                    // ‚ùå Token kh√¥ng h·ª£p l·ªá ‚Üí x√≥a v√† v·ªÅ trang login
                    localStorage.removeItem('jwt');
                    localStorage.removeItem('auth_data');
                    window.location.href = "index.html";
                } else {
                    // ‚úÖ Token h·ª£p l·ªá ‚Üí ti·∫øp t·ª•c
                    fillDataUser(data.user);
                }
            })
            .catch(err => {
                console.error("L·ªói x√°c th·ª±c token:", err);
                localStorage.removeItem('jwt');
                localStorage.removeItem('auth_data');
                window.location.href = "index.html";
            });
    }

