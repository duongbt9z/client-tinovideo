const dashboardTranslations = {
  "vi": {
    "page-title": "T·∫°o video - Tinovideo",
    "lang-vi": "VI",
    "lang-en": "EN",
    "brand-name": "Tinovideo",
    "nav-create": "T·∫°o Video M·ªõi",
    "nav-create-veo": "T·∫°o video veo",
    "nav-edit": "Edit Video",
    "nav-affiliate": "Affiliate",
    "nav-settings": "C√†i ƒê·∫∑t",
    "nav-help": "Tr·ª£ gi√∫p",
    "credits-remaining": "Credits c√≤n l·∫°i:",
    "upgrade-btn": "N√¢ng c·∫•p",
    "page-header": "T·∫°o Video",
    "form-title": "T·∫°o Video b·∫±ng AI Veo",
    "label-duration": "Th·ªùi l∆∞·ª£ng video:",
    "duration-16": "16s",
    "duration-24": "24s",
    "duration-32": "32s",
    "label-product-name": "T√™n s·∫£n ph·∫©m:",
    "placeholder-product-name": "Nh·∫≠p t√™n s·∫£n ph·∫©m...",
    "btn-generate-script": "T·∫°o k·ªãch b·∫£n cho video",
    "note-script": "K·ªãch b·∫£n s·∫Ω sinh d·ª±a tr√™n t√™n s·∫£n ph·∫©m.",
    "btn-upload": "üìÇ Ch·ªçn ·∫£nh",
    "btn-generate-video": "üöÄ T·∫†O VIDEO",
    "status-ready": "üü¢ S·∫µn s√†ng.",
    "label-log": "üìù Log ch·∫°y:",
    "btn-clear-log": "Xo√° log"
  },
  "en": {
    "page-title": "Create videos - Tinovideo",
    "lang-vi": "VI",
    "lang-en": "EN",
    "brand-name": "Tinovideo",
    "nav-create": "Create New Video",
    "nav-create-veo": "Create Veo Video",
    "nav-edit": "Edit Video",
    "nav-affiliate": "Affiliate",
    "nav-settings": "Settings",
    "nav-help": "Help",
    "credits-remaining": "Remaining credits:",
    "upgrade-btn": "Upgrade",
    "page-header": "Create Video",
    "form-title": "Create Video with AI Veo",
    "label-duration": "Video duration:",
    "duration-16": "16s",
    "duration-24": "24s",
    "duration-32": "32s",
    "label-product-name": "Product name:",
    "placeholder-product-name": "Enter product name...",
    "btn-generate-script": "Generate script for Videos",
    "note-script": "The script will be generated based on the product name.",
    "btn-upload": "üìÇ Choose images",
    "btn-generate-video": "üöÄ CREATE VIDEO",
    "status-ready": "üü¢ Ready.",
    "label-log": "üìù Execution log:",
    "btn-clear-log": "Clear log"
  }
}

const uploadBtn = document.getElementById("uploadBtn");
const imageUpload = document.getElementById("imageUpload");
const imageList = document.getElementById("imageList");
const generateBtn = document.getElementById("generateBtn");
const logOutput = document.getElementById("logOutput");
const clearBtn = document.getElementById("clearBtn");
const statusLabel = document.getElementById("statusLabel");
const durationSelect = document.getElementById("durationSelect");
const productNameInput = document.getElementById("productName");
const productNameSection = document.getElementById("productNameSection");
const generateScriptBtn = document.getElementById("generateScriptBtn");

const uploadedFiles = []; // ‚úÖ qu·∫£n l√Ω ·∫£nh ·ªü ƒë√¢y
const maxImagesMap = { 16: 2, 24: 3, 32: 4 };


uploadBtn.addEventListener("click", () => {
  const productName = productNameInput.value.trim();
  if (!selectedDuration) {
    showToast("Vui L√≤ng ch·ªçn th·ªùi gian video tr∆∞·ªõc", 'warning')
    return;
  }
  if (!productName) {
    showToast("Vui L√≤ng Nh·∫≠p T√™n S·∫£n Ph·∫ßm tr∆∞·ªõc", 'warning')
    productNameInput.focus();
    return;
  }


  imageUpload.click();
});
function showToast(message, type = 'info') {
  const toast = document.createElement('div');
  toast.className = `fixed top-20 right-4 z-50 px-6 py-3 rounded-lg text-white font-medium transform translate-x-full transition-transform duration-300`;
  switch (type) {
    case 'success': toast.classList.add('bg-green-500'); break;
    case 'error': toast.classList.add('bg-red-500'); break;
    case 'warning': toast.classList.add('bg-yellow-500'); break;
    default: toast.classList.add('bg-blue-500');
  }
  toast.textContent = message;
  document.body.appendChild(toast);
  setTimeout(() => toast.classList.remove('translate-x-full'), 10);
  setTimeout(() => {
    toast.classList.add('translate-x-full');
    setTimeout(() => toast.remove(), 200);
  }, 2000);
}
// durationSelect.addEventListener("change", () => {
//   const duration = parseInt(durationSelect.value);
//   productNameSection.style.display = "block";
// });
let selectedDuration = null;
const buttons = document.querySelectorAll('.duration-btn');

buttons.forEach(btn => {
  btn.addEventListener('click', () => {
    buttons.forEach(b => b.classList.remove('bg-blue-500'));
    buttons.forEach(b => b.classList.add('bg-gray-600'));

    btn.classList.remove('bg-gray-600');
    btn.classList.add('bg-blue-500');

    selectedDuration = parseInt(btn.dataset.value); // ‚úÖ l∆∞u gi√° tr·ªã duration
    console.log("Th·ªùi l∆∞·ª£ng ƒë√£ ch·ªçn:", selectedDuration);


    // console.log("Th·ªùi l∆∞·ª£ng ƒë√£ ch·ªçn:", selectedDuration);
  });
});
imageUpload.addEventListener("change", () => {
  // const duration = parseInt(durationSelect.value);
  const maxImages = maxImagesMap[selectedDuration] || Infinity;

  const currentCount = imageList.querySelectorAll("li").length;

  const files = Array.from(imageUpload.files);
  const remainingSlots = maxImages - currentCount;
  const filesToAdd = files.slice(0, remainingSlots);

  if (filesToAdd.length < files.length) {
    showToast(`B·∫°n ch·ªâ c√≥ th·ªÉ ch·ªçn t·ªëi ƒëa ${maxImages} ·∫£nh cho video ${duration}s.`, 'warning')
  }

  for (const file of filesToAdd) {
    uploadedFiles.push(file); // ‚úÖ l∆∞u file v√†o m·∫£ng ƒë·ªìng b·ªô

    const reader = new FileReader();
    reader.onload = () => {
      const wrapper = document.createElement("li");

      const imageWrapper = document.createElement("div");
      imageWrapper.style.position = "relative";
      imageWrapper.style.display = "inline-block";

      const imageEl = document.createElement("img");
      imageEl.src = reader.result;
      imageEl.className = "image-preview";

      const removeBtn = document.createElement("button");
      removeBtn.textContent = "√ó";
      removeBtn.title = "Xo√° ·∫£nh n√†y";
      removeBtn.className = "remove-overlay-btn";
      removeBtn.addEventListener("click", () => {
        const index = Array.from(imageList.children).indexOf(wrapper);
        if (index !== -1) {
          uploadedFiles.splice(index, 1); // ‚úÖ xo√° file t∆∞∆°ng ·ª©ng
        }
        wrapper.remove();
      });

      imageWrapper.appendChild(imageEl);
      imageWrapper.appendChild(removeBtn);
      wrapper.appendChild(imageWrapper);
      imageList.appendChild(wrapper);
    };
    reader.readAsDataURL(file);
  }

  imageUpload.value = ""; // üëà reset input ƒë·ªÉ ch·ªçn l·∫°i ·∫£nh sau
});

clearBtn.addEventListener("click", () => logOutput.value = "");
let generatedScenes = [];
generateScriptBtn.addEventListener("click", async () => {
  const productName = productNameInput.value.trim();
  const items = imageList.querySelectorAll("li");
  // üõ°Ô∏è Check th·ªùi l∆∞·ª£ng
  if (!selectedDuration) {
    showToast("Vui l√≤ng ch·ªçn th·ªùi gian video", 'warning');
    return;
  }

  // üõ°Ô∏è Check t√™n s·∫£n ph·∫©m
  if (!productName) {
    showToast("Vui l√≤ng nh·∫≠p t√™n s·∫£n ph·∫©m.", 'warning');
    return;
  }
  userId = localStorage.getItem("userId");
  try {
    log("üß† ƒêang t·∫°o k·ªãch b·∫£n cho ·∫£nh...");
    const res = await fetch("https://admin.tinovideo.com/api/generate-veo-script", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ product_name: productName, duration: selectedDuration, userId: userId }),
    });

    const data = await res.json();
    if (!res.ok) {
      // ‚úÖ L·∫•y l·ªói t·ª´ API
      let errMsg = data.error || data.message || "Kh√¥ng th·ªÉ t·∫°o k·ªãch b·∫£n";
      showToast(`L·ªói: ${errMsg}`, 'error');
      throw new Error(errMsg);
    }
    showToast("T·∫°o k·ªãch b·∫£n th√†nh c√¥ng", 'success')
    const scenes = data.scenes || [];
    if (scenes.length === 0) throw new Error("Kh√¥ng c√≥ scene n√†o ƒë∆∞·ª£c tr·∫£ v·ªÅ");
    generatedScenes = scenes;
    items.forEach((li, idx) => {
      const scene = scenes[idx];
      if (!scene) return;

      let span = li.querySelector("span.prompt-input");
      if (!span) {
        span = document.createElement("span");
        span.className = "prompt-input";
        li.appendChild(span);
      }
      span.value = scene.prompt || "";
    });

    log("‚úÖ K·ªãch b·∫£n ƒë√£ ƒë∆∞·ª£c t·∫°o v√† ch√®n v√†o ·∫£nh.");
  } catch (err) {
    log("‚ùå L·ªói: " + err.message);
    // showToast("L·ªói t·∫°o k·ªãch b·∫£n: ", 'error');
  }
});

// generateBtn.addEventListener("click", async () => {
//   const userId = "abc123"; // üëâ Thay b·∫±ng user_id th·ª±c t·∫ø c·ªßa b·∫°n
//   const items = imageList.querySelectorAll("li");

//   if (items.length === 0) return alert("Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt ·∫£nh.");
//   if (items.length !== uploadedFiles.length) return alert("D·ªØ li·ªáu ·∫£nh kh√¥ng ƒë·ªìng b·ªô. Vui l√≤ng ch·ªçn l·∫°i ·∫£nh.");

//   const formData = new FormData();
//   formData.append("user_id", userId);
//   const prompts = [{
//         "aspectRatio": "16:9",
//         "durationSeconds": 8,
//         "enhancePrompt": true,
//         "generateAudio": true,
//         "negativePrompt": "blurry, low quality, distorted, watermark, cartoonish, static camera, dull colors, low light, text on screen, subtitles, captions, bad anatomy, bad facial features, unprofessional look, overly sexualized, emphasizing body shape, revealing clothing.",
//         "personGeneration": "allow_young_adult",
//         "prompt": "A young adult woman, with a trendy and stylish appearance, is casually posing in a well-lit modern apartment. She's wearing the Justdun B18 cotton long-fiber stretch bodycon t-shirt. Close-up shots highlighting the soft, smooth texture of the shirt and its comfortable fit.  Tracking shot showcasing the shirt's form-fitting design without emphasizing body details. The overall mood is relaxed and confident. The background is slightly blurred, focusing attention on the model and the shirt.",
//         "seed": 7872,
//         "voiceOver": "Ch√†o c·∫£ nh√†! M√¨nh ƒëang di·ªán em √°o thun Justdun B18 si√™u xinh n√†y n√®! Ch·∫•t li·ªáu cotton l√¥ng m·ªãn, m·∫∑c l√™n m√°t r∆∞·ª£i l·∫°i co gi√£n tho·∫£i m√°i c·ª±c lu√¥n. Form √¥m body nh∆∞ng kh√¥ng h·ªÅ kh√≥ ch·ªãu nha!  ƒê·∫πp xu·∫•t s·∫Øc, l·∫°i ch·∫•t l∆∞·ª£ng n·ªØa ch·ª©!"
//     },
//     {
//         "aspectRatio": "16:9",
//         "durationSeconds": 8,
//         "enhancePrompt": true,
//         "generateAudio": true,
//         "negativePrompt": "blurry, low quality, distorted, watermark, cartoonish, static camera, dull colors, low light, text on screen, subtitles, captions, bad anatomy, bad facial features, unprofessional look, overly sexualized, emphasizing body shape, revealing clothing, awkward posing.",
//         "personGeneration": "allow_young_adult",
//         "prompt": "The same young adult woman is now moving dynamically in a stylish cafe setting.  She's gracefully interacting with her surroundings, possibly sipping coffee or looking at her phone, showcasing the shirt's comfort and flexibility through natural movement. Quick cuts and dynamic angles are used to emphasize the versatility and everyday wearability of the shirt. The camera uses a combination of close-up shots and wider shots, showing the shirt in various poses and lighting conditions.  The overall aesthetic is modern and trendy.",
//         "seed": 7873,
//         "voiceOver": "M·∫∑c ƒëi h·ªçc, ƒëi ch∆°i hay c√† ph√™ chill c√πng b·∫°n b√® ƒë·ªÅu ok h·∫øt nha! Ch·∫•t cotton n√†y m·∫∑c c·∫£ ng√†y c≈©ng kh√¥ng b·ªã b√≠ ƒë√¢u.  Justdun B18 ‚Äì √°o thun qu·ªëc d√¢n ƒë√¢y r·ªìi!  Link mua h√†ng ·ªü d∆∞·ªõi nha m·ªçi ng∆∞·ªùi, nhanh tay n√†o!"
//     }]

//   for (let i = 0; i < items.length; i++) {
//     const file = uploadedFiles[i];
//     if (!file) continue;
//     formData.append("images", file);
//     formData.append("prompts", JSON.stringify(prompts[i]));
//   }

//   log("üîÑ ƒêang g·ª≠i y√™u c·∫ßu t·∫°o video...");
//   statusLabel.textContent = "‚è≥ ƒêang t·∫°o video...";
//   generateBtn.disabled = true;

//   try {
//     const res = await fetch("https://admin.tinovideo.com/api/generate-veo", {
//       method: "POST",
//       body: formData,
//     });

//     const result = await res.json();
//     if (res.ok) {
//       log("‚úÖ " + result.message);
//       statusLabel.textContent = "‚úÖ Th√†nh c√¥ng!";
//     } else {
//       log("‚ùå L·ªói: " + (result.error || "Kh√¥ng x√°c ƒë·ªãnh"));
//       statusLabel.textContent = "‚ùå L·ªói khi t·∫°o video";
//     }
//   } catch (err) {
//     log("‚ùå L·ªói k·∫øt n·ªëi: " + err.message);
//     statusLabel.textContent = "‚ùå L·ªói h·ªá th·ªëng";
//   }

//   generateBtn.disabled = false;
// });
generateBtn.addEventListener("click", async () => {
  const userId = localStorage.getItem("userId");
  const items = imageList.querySelectorAll("li");
  const productName = productNameInput.value.trim();
  if (!selectedDuration) {
    showToast("Vui L√≤ng ch·ªçn th·ªùi gian video tr∆∞·ªõc", 'warning')
    return;
  }
  if (!productName) {
    showToast("Vui L√≤ng Nh·∫≠p T√™n S·∫£n Ph·∫ßm tr∆∞·ªõc", 'warning')
    productNameInput.focus();
    return;
  }
  if (items.length === 0) return showToast("Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt ·∫£nh.", "warning");
  if (items.length !== uploadedFiles.length) return showToast("D·ªØ li·ªáu ·∫£nh kh√¥ng ƒë·ªìng b·ªô. Vui l√≤ng ch·ªçn l·∫°i ·∫£nh.", "error");

  const formData = new FormData();
  formData.append("user_id", userId);

  // üîπ L·∫•y prompt & voiceOver t·ª´ c√°c textarea ƒë√£ g·∫Øn khi generate script
  for (let i = 0; i < items.length; i++) {
    const file = uploadedFiles[i];
    if (!file) continue;

    const prompt = items[i].querySelector("span.prompt-input")?.value
      || generatedScenes[i]?.prompt
      || "";
    const voiceOver = items[i].querySelector("span.voiceover-input")?.value
      || generatedScenes[i]?.voiceOver
      || "";
    if (!prompt || !voiceOver) {
      showToast("Vui l√≤ng t·∫°o k·ªãch b·∫£n tr∆∞·ªõc!");
      return;
    }
    const sceneData = {
      aspectRatio: "16:9",
      durationSeconds: 8,
      enhancePrompt: true,
      generateAudio: true,
      negativePrompt:
        "blurry, low quality, distorted, watermark, cartoonish, static camera, dull colors, low light, text on screen, subtitles, captions, bad anatomy, bad facial features, unprofessional look, overly sexualized, emphasizing body shape, revealing clothing.",
      personGeneration: "allow_young_adult",
      prompt,
      seed: Math.floor(1000 + Math.random() * 9000),
      voiceOver
    };

    formData.append("images", file);
    formData.append("prompts", JSON.stringify(sceneData));
  }

  log("üîÑ ƒêang g·ª≠i y√™u c·∫ßu t·∫°o video...");
  statusLabel.textContent = "‚è≥ ƒêang t·∫°o video...";
  generateBtn.disabled = true;

  try {
    const res = await fetch("https://admin.tinovideo.com/api/generate-veo", {
      method: "POST",
      body: formData,
    });

    const result = await res.json();
    if (res.ok) {
      log("‚úÖ " + result.message);
      statusLabel.textContent = "‚úÖ Th√†nh c√¥ng! vui l√≤ng check th∆∞ m·ª•c Downloads tr√™n m√°y";
      showToast("T·∫°o video b·∫£n th√†nh c√¥ng", 'success')
    } else {
      showToast("T·∫°o video b·∫£n th√†nh c√¥ng", 'error')
      log("‚ùå L·ªói: " + (result.error || "Kh√¥ng x√°c ƒë·ªãnh"));
      statusLabel.textContent = "‚ùå L·ªói khi t·∫°o video";
    }
  } catch (err) {
    log("‚ùå L·ªói k·∫øt n·ªëi: " + err.message);
    // statusLabel.textContent = "‚ùå L·ªói h·ªá th·ªëng";
    showToast("‚ùå L·ªói h·ªá th·ªëng", 'error')
  }

  generateBtn.disabled = false;
});

function log(msg) {
  logOutput.value += msg + "\n";
  logOutput.scrollTop = logOutput.scrollHeight;
}
let cachedUser = null;
const API_BASE_URL = 'https://admin.tinovideo.com';
function fillDataUser(user) {
  const nameDiv = document.querySelector('[data-key="user-name"]');
  if (nameDiv) nameDiv.textContent = user.name;

  const point = document.querySelector('[data-key="point"]');
  if (point) point.textContent = user.point;

  const avatarImg = document.querySelector('[data-key="user-avatar"]');
  if (avatarImg) avatarImg.src = user.avatar;

  const userPlan = document.querySelector('[data-key="user-plan"]');
  // const claimedPlans = [
  //   user.role && "Free",
  //   user.role && "Standard",
  //   user.role && "Pro",
  //   user.role && "Max"
  // ].filter(Boolean);

  // let highestPlan = "Ch∆∞a c√≥ g√≥i";
  // const PLAN_PRIORITY = ["Max", "Pro", "Standard", "Free"];
  // for (const plan of PLAN_PRIORITY) {
  //   if (claimedPlans.includes(plan)) {
  //     highestPlan =  user.role ;
  //     break;
  //   }
  // }

  if (userPlan) userPlan.textContent = user.role;
  const userMoney = document.querySelector('[data-key="user-money"]');
  if (userMoney) if (!user.money) {
    userMoney.textContent = "Ch∆∞a c√≥ hoa h·ªìng";
  } else {
    userMoney.textContent = user.money + ".000 VNƒê";
  }
  const userShare = document.querySelector('[data-key="user-share"]');
  if (userShare) userShare.textContent = user.user_share + " Ng∆∞·ªùi" || "Ch∆∞a c√≥ ng∆∞·ªùi gi·ªõi thi·ªáu ";
  // console.log("‚úÖ User ƒë√£ fill:", user);
}
async function getUserInfoOnce() {
  if (cachedUser) return cachedUser;

  const authData = localStorage.getItem("auth_data");
  if (authData) {
    cachedUser = JSON.parse(authData);
    fillDataUser(cachedUser);  // ‚úÖ g·ªçi ƒë√∫ng
    return cachedUser;
  }

  const token = localStorage.getItem("jwt");
  if (!token) return null;

  try {
    const res = await fetch(`${API_BASE_URL}/api/user`, {
      method: "GET",
      headers: { Authorization: `Bearer ${token}` }
    });
    const data = await res.json();
    if (data.success) {
      cachedUser = data.user;
      localStorage.setItem("auth_data", JSON.stringify(data.user));
      fillDataUser(cachedUser);  // ‚úÖ truy·ªÅn ƒë√∫ng user
      return cachedUser;
    } else {
      console.warn("‚ùå Kh√¥ng l·∫•y ƒë∆∞·ª£c th√¥ng tin user:", data.error);
      return null;
    }
  } catch (err) {
    console.error("‚ùå L·ªói k·∫øt n·ªëi:", err);
    return null;
  }
}
window.addEventListener("DOMContentLoaded", async () => {
  const user = await getUserInfoOnce();
  if (user) {
    // Sau khi fill xong th√¨ l∆∞u userId ƒë·ªÉ chia s·∫ª link
    localStorage.setItem("userId", user.id);
  }
  const token = localStorage.getItem('jwt');
  if (!token) {
    window.location.href = "index.html";
  } else {
    // G·ª≠i request x√°c th·ª±c token
    fetch(`${API_BASE_URL}/api/user`, {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${token}`
      }
    })
      .then(res => res.json())
      .then(data => {
        if (!data.success) {
          // ‚ùå Token kh√¥ng h·ª£p l·ªá ‚Üí x√≥a v√† v·ªÅ trang login
          localStorage.removeItem('jwt');
          localStorage.removeItem('auth_data');
          window.location.href = "index.html";
        } else {
          // ‚úÖ Token h·ª£p l·ªá ‚Üí ti·∫øp t·ª•c
          fillDataUser(data.user);
        }
      })
      .catch(err => {
        console.error("L·ªói x√°c th·ª±c token:", err);
        localStorage.removeItem('jwt');
        localStorage.removeItem('auth_data');
        window.location.href = "index.html";
      });
  }
  const upgradeBtn = document.querySelector(".upgrade-btn");
  if (upgradeBtn) {
    upgradeBtn.addEventListener("click", () => {
      window.location.href = "subscribe.html";
    });
  }
  const btn = document.getElementById("sidebar-toggle");
  const sidebar = document.getElementById("sidebar");

  btn.addEventListener("click", () => {
    if (sidebar.style.display === "none") {
      sidebar.style.display = "block"; // Ho·∫∑c "flex", t√πy b·∫°n mu·ªën hi·ªán nh∆∞ th·∫ø n√†o
    } else {
      sidebar.style.display = "none";
    }
  });
});

document.addEventListener("DOMContentLoaded", () => {
  const savedLang = localStorage.getItem("tinovideo-language") || "vi";
  switchLanguage(savedLang);

  document.querySelectorAll('.lang-btn').forEach(btn => {

    btn.addEventListener('click', () => {
      const lang = btn.dataset.lang;
      switchLanguage(lang);
    });
  });

});
function toggleSidebar() {
  const sidebar = document.getElementById("sidebar");
  if (sidebar) {
    sidebar.style.display = "none";
  }
}
function switchLanguage(lang) {
  localStorage.setItem('tinovideo-language', lang);
  const t = dashboardTranslations[lang];

  document.querySelectorAll('.lang-btn').forEach(btn => {
    if (btn.dataset.lang === lang) {
      btn.style.display = 'none'; // ·∫©n n√∫t hi·ªán t·∫°i
    } else {
      btn.style.display = 'inline-block'; // hi·ªán n√∫t c√≤n l·∫°i
    }
    btn.classList.remove('active');
    if (btn.dataset.lang === lang) {
      btn.classList.add('active');
    }
  });

  document.querySelectorAll('[data-key]').forEach(el => {
    const key = el.getAttribute('data-key');
    if (!t[key]) return;

    if (el.placeholder !== undefined && el.tagName === 'INPUT') {
      el.placeholder = t[key];
    } else {
      el.textContent = t[key];
    }
  });


}