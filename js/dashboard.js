const API_BASE_URL = 'https://admin.tinovideo.com';
let currentStep = 1;
let selectedVoice = null;
let uploadedImages = [];
let projectData = {
    url: '',
    text: '',
    voice: null,
    template: null,
    settings: {
        speed: 1,
        pitch: 0,
        volume: 80,
        music: 'none',
        textStyle: 'modern',
        transition: 'fade',
        duration: 30
    }
};
let allVoices = [];

const dashboardTranslations = {
    "vi": {
        "nav-create-veo": "T·∫°o video veo",
        "-vi-75cb": "üáªüá≥ VI",
        "-en-1b8b": "üá∫üá∏ EN",
        "tinovideo-bd7c": "Tinovideo",
        "-0985": "‚ò∞",
        "-864a": "|",
        "1-6c96": "1",
        "2-efd6": "2",
        "3-f74e": "3",
        "4-3c81": "4",
        "5-f5dc": "5",
        "15s-1a65": "15s",
        "30s-fbdb": "30s",
        "60s-e055": "60s",
        "t·∫•t-c·∫£-fdff": "T·∫•t¬†c·∫£",
        "qu·∫£ng-c√°o-9c1e": "Qu·∫£ng¬†c√°o",
        "ƒë√°nh-gi√°-53a7": "ƒê√°nh¬†gi√°",
        "k·ªÉ-chuy·ªán-41bd": "K·ªÉ¬†chuy·ªán",
        "m·∫πo-nhanh-bb29": "M·∫πo¬†nhanh",
        "gi·ªõi-t√≠nh-fddb": "Gi·ªõi t√≠nh",
        "t·∫•t-c·∫£-7368": "T·∫•t c·∫£",
        "nam-f5d3": "Nam",
        "n·ªØ-de04": "N·ªØ",
        "c·∫£m-x√∫c-e1d3": "C·∫£m x√∫c",
        "t·∫•t-c·∫£-c501": "T·∫•t c·∫£",
        "vui-v·∫ª-8e8d": "Vui v·∫ª",
        "nghi-ng·ªù-3177": "nghi ng·ªù",
        "bu·ªìn-b√£-8edc": "bu·ªìn b√£",
        "c·∫•p-b√°ch-84a8": "c·∫•p b√°ch",
        "wow-ad8f": "Wow",
        "t·ª©c-t·ªëi-e63a": "T·ª©c t·ªëi",
        "-ch·ªçn-c√¢u-m·ªü-ƒë·∫ßu--2b23": "-- Ch·ªçn c√¢u m·ªü ƒë·∫ßu --",
        "ch√†o-b·∫°n-ƒë√¢y-l√†-s·∫£n-ph·∫©m-ƒëang-r·∫•t-hot-tr-6e72": "Ch√†o\n                                                b·∫°n! ƒê√¢y l√† s·∫£n ph·∫©m ƒëang r·∫•t hot tr√™n th·ªã tr∆∞·ªùng.",
        "b·∫°n-ƒëang-t√¨m-m·ªôt-gi·∫£i-ph√°p-hi·ªáu-qu·∫£-h√£y--cb30": "B·∫°n ƒëang t√¨m m·ªôt gi·∫£i ph√°p hi·ªáu qu·∫£? H√£y xem ngay s·∫£n ph·∫©m n√†y!",
        "h√¥m-nay-m√¨nh-s·∫Ω-review-m·ªôt-s·∫£n-ph·∫©m-c·ª±c--d7aa": "H√¥m\n                                                nay m√¨nh s·∫Ω review m·ªôt s·∫£n ph·∫©m c·ª±c k·ª≥ ƒë√°ng ch√∫ √Ω.",
        "c√πng-kh√°m-ph√°-ƒëi·ªÅu-ƒë·∫∑c-bi·ªát-·ªü-s·∫£n-ph·∫©m-n-12e1": "C√πng kh√°m\n                                                ph√° ƒëi·ªÅu ƒë·∫∑c bi·ªát ·ªü s·∫£n ph·∫©m n√†y nh√©!",
        "ƒë·ª´ng-b·ªè-l·ª°-ƒë√¢y-c√≥-th·ªÉ-l√†-th·ª©-b·∫°n-ƒëang-c·∫ß-b497": "ƒê·ª´ng b·ªè l·ª°, ƒë√¢y\n                                                c√≥ th·ªÉ l√† th·ª© b·∫°n ƒëang c·∫ßn!",
        "0-5f31": "0%",
        "1280x720-0975": "1280x720",
        "1920x1080-2b62": "1920x1080",
        "3840x2160-674e": "3840x2160",
        "mp4-khuy·∫øn-ngh·ªã-2dda": "MP4 (Khuy·∫øn ngh·ªã)",
        "mov-1e90": "MOV",
        "avi-96ef": "AVI",
        "d·ª±-√°n-c·ªßa-t√¥i-e9e2": "D·ª± √Ån C·ªßa T√¥i",
        "danh-s√°ch-c√°c-d·ª±-√°n-c·ªßa-b·∫°n-s·∫Ω-hi·ªÉn-th·ªã--18fb": "Danh s√°ch c√°c d·ª± √°n c·ªßa b·∫°n s·∫Ω hi·ªÉn th·ªã t·∫°i ƒë√¢y.",
        "ch·ªânh-s·ª≠a-video-c·ªßa-b·∫°n-5600": "Ch·ªânh s·ª≠a video c·ªßa b·∫°n",
        "affiliate-a712": "Affiliate",
        "th√¥ng-tin-ch∆∞∆°ng-tr√¨nh-affiliate-link-gi-a5ce": "Th√¥ng tin ch∆∞∆°ng tr√¨nh affiliate & link gi·ªõi thi·ªáu.",
        "c√†i-ƒë·∫∑t-966b": "C√†i ƒê·∫∑t",
        "thay-ƒë·ªïi-t√πy-ch·ªçn-c√°-nh√¢n-c·ªßa-b·∫°n-·ªü-ƒë√¢y-5f5a": "Thay ƒë·ªïi t√πy ch·ªçn c√° nh√¢n c·ªßa b·∫°n ·ªü ƒë√¢y.",
        "tr·ª£-gi√∫p-27e9": "Tr·ª£ Gi√∫p",
        "c√°c-c√¢u-h·ªèi-th∆∞·ªùng-g·∫∑p-v√†-h·ªó-tr·ª£-7fa1": "C√°c c√¢u h·ªèi th∆∞·ªùng g·∫∑p v√† h·ªó tr·ª£.",
        "nav-create": "T·∫°o Video M·ªõi",
        "nav-templates": "Edit Video",
        "nav-affiliate": "Affiliate",
        "nav-settings": "C√†i ƒê·∫∑t",
        "nav-help": "Tr·ª£ gi√∫p",
        "user-plan": "Ch∆∞a c√≥ g√≥i ",
        "credits-remaining": "Credits c√≤n l·∫°i:",
        "point": "100",
        "upgrade-btn": "N√¢ng c·∫•p",
        "main-title": "T·∫°o Video AI",
        "step-1-title": "Nh·∫≠p N·ªôi Dung",
        "step-2-title": "Ch·ªçn Gi·ªçng ƒê·ªçc AI",
        "step-3-title": "T·∫°o K·ªãch B·∫£n",
        "step-4-title": "T·∫°o Video",
        "step-5-title": "Xu·∫•t Video",
        "step-1-main-title": "B∆∞·ªõc 1: Nh·∫≠p N·ªôi Dung\n                                    S·∫£n Ph·∫©m",
        "step-1-description": "Nh·∫≠p URL s·∫£n ph·∫©m ho·∫∑c vƒÉn\n                                    b·∫£n n·ªôi dung ƒë·ªÉ t·∫°o video",
        "url-label": "URL S·∫£n\n                                            ph·∫©m",
        "analyze-btn": "Ph√¢n\n                                                    t√≠ch",
        "supported-platforms": "N·ªÅn t·∫£ng\n                                            ƒë∆∞·ª£c h·ªó tr·ª£:",
        "images-label": "H√¨nh ·∫£nh\n                                            b·ªï sung (tu·ª≥ ch·ªçn)",
        "upload-title": "K√©o th·∫£ ho·∫∑c\n                                                nh·∫•p ƒë·ªÉ t·∫£i l√™n",
        "upload-desc": "H·ªó tr·ª£ JPG, PNG, WEBP. T·ªëi\n                                                ƒëa 10 h√¨nh.",
        "text-label": "N·ªôi dung vƒÉn\n                                            b·∫£n",
        "reset-btn": "ƒê·∫∑t l·∫°i",
        "next-btn": "Ti·∫øp theo: Ch·ªçn gi·ªçng ƒë·ªçc",
        "step-2-main-title": "B∆∞·ªõc 2: Ch·ªçn Gi·ªçng ƒê·ªçc\n                                    AI",
        "step-2-description": "L·ª±a ch·ªçn gi·ªçng ƒë·ªçc ph√π h·ª£p\n                                    cho video c·ªßa b·∫°n",
        "all-voices": "T·∫•t c·∫£",
        "male-voices": "Gi·ªçng Nam",
        "female-voices": "Gi·ªçng N·ªØ",
        "video-duration": "Th·ªùi l∆∞·ª£ng\n                                        video",
        "previous-btn": "Quay\n                                        l·∫°i",
        "next-create-btn": "Ti·∫øp theo: m·ªü ƒë·∫ßu",
        "prompt-main-title": "B∆∞·ªõc¬†3: Ch·ªçn K·ªãch B·∫£n",
        "prompt-desc": "Ch·ªçn m·∫´u k·ªãch b·∫£n ph√π h·ª£p ho·∫∑c t·∫°o\n                                    m·ªõi ƒë·ªÉ AI d·ª±ng video",
        "sample-text-title": "K·ªãch b·∫£n\n                                        c·ªßa b·∫°n",
        "sample-text-placeholder": "C·∫£m ∆°n b·∫°n ƒë√£ l·ª±a ch·ªçn d·ªãch v·ª• c·ªßa ch√∫ng t√¥i. ƒê√¢y l√† gi·ªçng ƒë·ªçc AI t·ª´ ph·∫ßn m·ªÅm Ti N√¥ Video, ƒë∆∞·ª£c thi·∫øt k·∫ø nh·∫±m mang ƒë·∫øn tr·∫£i nghi·ªám nghe t·ª± nhi√™n v√† d·ªÖ ch·ªãu nh·∫•t.",
        "preview-voice": "T·∫°o k·ªãch\n                                            b·∫£n",
        "step-3-main-title": "B∆∞·ªõc 5: T·∫°o AI Video",
        "transitions": "Ch·ªçn c·∫£m x√∫c\n                                    b·∫°n mu·ªën ho·∫∑c d√πng AI t√¨m phi√™n b·∫£n t·ªët nh·∫•t",
        "next-export-btn": "Ti·∫øp theo: Xu·∫•t video",
        "customization": "G·ª£i √Ω m·ªü ƒë·∫ßu ·∫•n\n                                        t∆∞·ª£ng",
        "intro-sentence": "S·ª≠a C√¢u\n                                            m·ªü\n                                            ƒë·∫ßu theo √Ω c·ªßa ri√™ng b·∫°n",
        "video-preview": "Qu√° tr√¨nh t·∫°o video\n                                    s·∫Ω m·∫•t 2-3 ph√∫t",
        "generate-video": "T·∫°o Video\n                                        AI",
        "generation-time": "Qu√° tr√¨nh t·∫°o video s·∫Ω m·∫•t\n                                    2-3 ph√∫t",
        "step-4-main-title": "B∆∞·ªõc 5: Xu·∫•t Video",
        "step-4-description": "T√πy ch·ªânh ch·∫•t l∆∞·ª£ng v√† t·∫£i\n                                xu·ªëng video c·ªßa b·∫°n",
        "video-ready": "Video ƒë√£ s·∫µn s√†ng!",
        "video-ready-desc": "Video AI c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c t·∫°o\n                                    th√†nh c√¥ng",
        "export-settings": "C√†i ƒë·∫∑t xu·∫•t",
        "video-quality": "Ch·∫•t\n                                                l∆∞·ª£ng video",
        "video-format": "ƒê·ªãnh\n                                                d·∫°ng",
        "download-options": "T√πy ch·ªçn t·∫£i\n                                    xu·ªëng",
        "download-video": "T·∫£i\n                                            Video",
        "share-video": "Chia s·∫ª",
        "create-new": "T·∫°o video\n                                        m·ªõi",
        "processing": "ƒêang x·ª≠ l√Ω...",
        "processing-desc": "AI ƒëang t·∫°o video cho b·∫°n"
    },
    "en": {
        "nav-create-veo": "Create Veo Video",
        "-vi-75cb": "üáªüá≥ VI",
        "-en-1b8b": "üá∫üá∏ EN",
        "tinovideo-bd7c": "Tinovideo",
        "-0985": "‚ò∞",
        "-864a": "|",
        "1-6c96": "1",
        "2-efd6": "2",
        "3-f74e": "3",
        "4-3c81": "4",
        "5-f5dc": "5",
        "15s-1a65": "15s",
        "30s-fbdb": "30s",
        "60s-e055": "60s",
        "t·∫•t-c·∫£-fdff": "T·∫•t¬†c·∫£",
        "qu·∫£ng-c√°o-9c1e": "Qu·∫£ng¬†c√°o",
        "ƒë√°nh-gi√°-53a7": "ƒê√°nh¬†gi√°",
        "k·ªÉ-chuy·ªán-41bd": "K·ªÉ¬†chuy·ªán",
        "m·∫πo-nhanh-bb29": "M·∫πo¬†nhanh",
        "gi·ªõi-t√≠nh-fddb": "Gi·ªõi t√≠nh",
        "t·∫•t-c·∫£-7368": "T·∫•t c·∫£",
        "nam-f5d3": "Nam",
        "n·ªØ-de04": "N·ªØ",
        "c·∫£m-x√∫c-e1d3": "C·∫£m x√∫c",
        "t·∫•t-c·∫£-c501": "T·∫•t c·∫£",
        "vui-v·∫ª-8e8d": "Vui v·∫ª",
        "nghi-ng·ªù-3177": "nghi ng·ªù",
        "bu·ªìn-b√£-8edc": "bu·ªìn b√£",
        "c·∫•p-b√°ch-84a8": "c·∫•p b√°ch",
        "wow-ad8f": "Wow",
        "t·ª©c-t·ªëi-e63a": "T·ª©c t·ªëi",
        "-ch·ªçn-c√¢u-m·ªü-ƒë·∫ßu--2b23": "-- Ch·ªçn c√¢u m·ªü ƒë·∫ßu --",
        "ch√†o-b·∫°n-ƒë√¢y-l√†-s·∫£n-ph·∫©m-ƒëang-r·∫•t-hot-tr-6e72": "Ch√†o\n                                                b·∫°n! ƒê√¢y l√† s·∫£n ph·∫©m ƒëang r·∫•t hot tr√™n th·ªã tr∆∞·ªùng.",
        "b·∫°n-ƒëang-t√¨m-m·ªôt-gi·∫£i-ph√°p-hi·ªáu-qu·∫£-h√£y--cb30": "B·∫°n ƒëang t√¨m m·ªôt gi·∫£i ph√°p hi·ªáu qu·∫£? H√£y xem ngay s·∫£n ph·∫©m n√†y!",
        "h√¥m-nay-m√¨nh-s·∫Ω-review-m·ªôt-s·∫£n-ph·∫©m-c·ª±c--d7aa": "H√¥m\n                                                nay m√¨nh s·∫Ω review m·ªôt s·∫£n ph·∫©m c·ª±c k·ª≥ ƒë√°ng ch√∫ √Ω.",
        "c√πng-kh√°m-ph√°-ƒëi·ªÅu-ƒë·∫∑c-bi·ªát-·ªü-s·∫£n-ph·∫©m-n-12e1": "C√πng kh√°m\n                                                ph√° ƒëi·ªÅu ƒë·∫∑c bi·ªát ·ªü s·∫£n ph·∫©m n√†y nh√©!",
        "ƒë·ª´ng-b·ªè-l·ª°-ƒë√¢y-c√≥-th·ªÉ-l√†-th·ª©-b·∫°n-ƒëang-c·∫ß-b497": "ƒê·ª´ng b·ªè l·ª°, ƒë√¢y\n                                                c√≥ th·ªÉ l√† th·ª© b·∫°n ƒëang c·∫ßn!",
        "0-5f31": "0%",
        "1280x720-0975": "1280x720",
        "1920x1080-2b62": "1920x1080",
        "3840x2160-674e": "3840x2160",
        "mp4-khuy·∫øn-ngh·ªã-2dda": "MP4 (Khuy·∫øn ngh·ªã)",
        "mov-1e90": "MOV",
        "avi-96ef": "AVI",
        "d·ª±-√°n-c·ªßa-t√¥i-e9e2": "My Projects",
        "danh-s√°ch-c√°c-d·ª±-√°n-c·ªßa-b·∫°n-s·∫Ω-hi·ªÉn-th·ªã--18fb": "Danh s√°ch c√°c d·ª± √°n c·ªßa b·∫°n s·∫Ω hi·ªÉn th·ªã t·∫°i ƒë√¢y.",
        "ch·ªânh-s·ª≠a-video-c·ªßa-b·∫°n-5600": "Ch·ªânh s·ª≠a video c·ªßa b·∫°n",
        "affiliate-a712": "Affiliate",
        "th√¥ng-tin-ch∆∞∆°ng-tr√¨nh-affiliate-link-gi-a5ce": "Th√¥ng tin ch∆∞∆°ng tr√¨nh affiliate & link gi·ªõi thi·ªáu.",
        "c√†i-ƒë·∫∑t-966b": "Settings",
        "thay-ƒë·ªïi-t√πy-ch·ªçn-c√°-nh√¢n-c·ªßa-b·∫°n-·ªü-ƒë√¢y-5f5a": "Thay ƒë·ªïi t√πy ch·ªçn c√° nh√¢n c·ªßa b·∫°n ·ªü ƒë√¢y.",
        "tr·ª£-gi√∫p-27e9": "Tr·ª£ Gi√∫p",
        "c√°c-c√¢u-h·ªèi-th∆∞·ªùng-g·∫∑p-v√†-h·ªó-tr·ª£-7fa1": "C√°c c√¢u h·ªèi th∆∞·ªùng g·∫∑p v√† h·ªó tr·ª£.",
        "nav-create": "Create Video",
        "nav-templates": "Edit Video",
        "nav-affiliate": "Affiliate",
        "nav-settings": "Settings",
        "nav-help": "Help",
        "user-plan": "Professional",
        "credits-remaining": "Remaining credits:",
        "point": "100",
        "upgrade-btn": "Upgrade",
        "main-title": "Create AI Video",
        "step-1-title": "Input Content",
        "step-2-title": "Choose AI Voice",
        "step-3-title": "Create Script",
        "step-4-title": "Generate Video",
        "step-5-title": "Export Video",
        "step-1-main-title": "Step 1: Input Product Content",
        "step-1-description": "Enter product URL or text content to create the video",
        "url-label": "Product URL",
        "analyze-btn": "Analyze",
        "supported-platforms": "Supported Platforms:",
        "images-label": "Additional Images (Optional)",
        "upload-title": "Drag & Drop or Click to Upload",
        "upload-desc": "Supports JPG, PNG, WEBP. Max 10 images.",
        "text-label": "Text Content",
        "reset-btn": "Reset",
        "next-btn": "Next: Choose Voice",
        "step-2-main-title": "Step 2: Choose AI Voice",
        "step-2-description": "Select the appropriate AI voice for your video",
        "all-voices": "All Voices",
        "male-voices": "Male Voices",
        "female-voices": "Female Voices",
        "video-duration": "Video Duration",
        "previous-btn": "Back",
        "next-create-btn": "Next: Hook Line",
        "prompt-main-title": "Step 3: Choose Script",
        "prompt-desc": "Choose a suitable script or create a new one for AI to generate the video",
        "sample-text-title": "Your Script",
        "preview-voice": "Create Script",
        "step-3-main-title": "Step 5: Generate AI Video",
        "transitions": "Select the desired emotion or let AI choose the best version",
        "next-export-btn": "Next: Export Video",
        "customization": "Hook Suggestions",
        "intro-sentence": "Edit the Opening Line to Your Style",
        "video-preview": "Video generation will take 2-3 minutes",
        "generate-video": "Generate AI Video",
        "generation-time": "Video generation will take 2-3 minutes",
        "step-4-main-title": "Step 5: Export Video",
        "step-4-description": "Customize quality and download your video",
        "video-ready": "Video is Ready!",
        "video-ready-desc": "Your AI video has been successfully created",
        "export-settings": "Export Settings",
        "video-quality": "Video Quality",
        "video-format": "Format",
        "download-options": "Download Options",
        "download-video": "Download Video",
        "share-video": "Share",
        "create-new": "Create New Video",
        "processing": "Processing...",
        "processing-desc": "AI is generating your video"
    }
};
document.addEventListener("DOMContentLoaded", () => {
    const savedLang = localStorage.getItem("tinovideo-language") || "vi";
    switchLanguage(savedLang);

    document.querySelectorAll('.lang-btn').forEach(btn => {

        btn.addEventListener('click', () => {
            const lang = btn.dataset.lang;
            switchLanguage(lang);
        });
    });

});
function toggleSidebar() {
    const sidebar = document.getElementById("sidebar");
    if (sidebar) {
        sidebar.style.display = "none";
    }
}
function switchLanguage(lang) {
    localStorage.setItem('tinovideo-language', lang);
    const t = dashboardTranslations[lang];

    document.querySelectorAll('.lang-btn').forEach(btn => {
        if (btn.dataset.lang === lang) {
            btn.style.display = 'none'; // ·∫©n n√∫t hi·ªán t·∫°i
        } else {
            btn.style.display = 'inline-block'; // hi·ªán n√∫t c√≤n l·∫°i
        }
        btn.classList.remove('active');
        if (btn.dataset.lang === lang) {
            btn.classList.add('active');
        }
    });

    document.querySelectorAll('[data-key]').forEach(el => {
        const key = el.getAttribute('data-key');
        if (!t[key]) return;

        if (el.placeholder !== undefined && el.tagName === 'INPUT') {
            el.placeholder = t[key];
        } else {
            el.textContent = t[key];
        }
    });


}
function validateUrl(url) {
    try {
        new URL(url);
        return true;
    } catch {
        return false;
    }
}

function showToast(message, type = 'info') {
    const toast = document.createElement('div');
    toast.className = `fixed top-20 right-4 z-50 px-6 py-3 rounded-lg text-white font-medium transform translate-x-full transition-transform duration-300`;
    switch (type) {
        case 'success': toast.classList.add('bg-green-500'); break;
        case 'error': toast.classList.add('bg-red-500'); break;
        case 'warning': toast.classList.add('bg-yellow-500'); break;
        default: toast.classList.add('bg-blue-500');
    }
    toast.textContent = message;
    document.body.appendChild(toast);
    setTimeout(() => toast.classList.remove('translate-x-full'), 10);
    setTimeout(() => {
        toast.classList.add('translate-x-full');
        setTimeout(() => toast.remove(), 200);
    }, 2000);
}

function showLoading(button) {
    const original = button.innerHTML;
    button.disabled = true;
    button.innerHTML = 'ƒêang x·ª≠ l√Ω...';
    return () => {
        button.disabled = false;
        button.innerHTML = original;
    };
}

function updateStepProgress() {
    document.querySelectorAll('.step-progress').forEach((step, index) => {
        const circle = step.querySelector('div');
        const text = step.querySelector('span');
        const stepNumber = index + 1;
        if (stepNumber <= currentStep) {
            step.classList.add('step-active');
            circle.className = 'w-12 h-12 bg-gradient-to-r from-purple-500 to-purple-600 rounded-full flex items-center justify-center text-white font-bold text-lg';
            text.classList.remove('text-gray-400');
            text.classList.add('text-white');
        } else {
            step.classList.remove('step-active');
            circle.className = 'w-12 h-12 bg-gray-700 rounded-full flex items-center justify-center text-gray-400 font-bold text-lg';
            text.classList.remove('text-white');
            text.classList.add('text-gray-400');
        }
    });
}


// Select voice
function selectVoice(voiceId, element) {
    // Remove previous selection
    document.querySelectorAll('.voice-card').forEach(card => {
        card.classList.remove('selected');
    });

    // Add selection to clicked card
    element.classList.add('selected');

    // Store selected voice
    selectedVoice = { id: voiceId };

    showToast('ƒê√£ ch·ªçn gi·ªçng ƒë·ªçc', 'success');
}

// Filter voices
function filterVoices(filter) {
    // C·∫≠p nh·∫≠t n√∫t active
    document.querySelectorAll('.voice-category-btn').forEach(btn => {
        const label = btn.textContent.toLowerCase();
        const isMatch =
            (filter === 'male' && label.includes('nam')) ||
            (filter === 'female' && label.includes('n·ªØ')) ||
            (filter === 'all' && label.includes('t·∫•t'));
        btn.classList.toggle('active', isMatch);
    });

    const filtered = allVoices.filter(v => {
        if (filter === 'all') return true;
        return v.gender === filter;
    });

    renderVoiceGrid(filtered);
    showToast(`üéôÔ∏è L·ªçc gi·ªçng ƒë·ªçc: ${filter === 'female' ? 'N·ªØ' : filter === 'male' ? 'Nam' : 'T·∫•t c·∫£'}`, 'info');
}


function renderVoiceGrid(voices) {
    const voiceGrid = document.getElementById('voice-grid');
    voiceGrid.innerHTML = voices.map(v => `
        <div class="voice-card ${v.id === selectedVoice?.id ? 'selected' : ''}"
             onclick="selectVoice('${v.id}', this)">
          <div class="flex items-center mb-3">
            <div class="w-12 h-12 bg-gradient-to-r from-pink-500 to-purple-500 rounded-full
                        flex items-center justify-center mr-3">
              <i class="fas ${v.gender === 'male' ? 'fa-male' : 'fa-female'} text-white text-lg"></i>
            </div>
            <div>
              <h4 class="font-semibold">${v.name}</h4>
              <p class="text-sm text-gray-400">${v.accent}</p>
            </div>
          </div>
          <div class="flex justify-between items-center">
            <span class="text-xs px-2 py-1 rounded bg-green-500/20 text-green-400">Ti·∫øng Vi·ªát</span>
           <button class="voice-play-btn text-blue-400 hover:text-blue-300"
            data-filename="${v.demo}"
            onclick="handleVoicePlay(event)">
                <i class="fas fa-play"></i>
            </button>
          </div>
        </div>
    `).join('');
}


// Voice settings
function updateSpeed(value) {
    projectData.settings.speed = parseFloat(value);
}

let currentAudio = null;
let currentBtn = null;

function handleVoicePlay(event) {
    event.stopPropagation();
    const btn = event.currentTarget;
    const filename = btn.dataset.filename;
    const audioUrl = `/demo-voices/${filename}`;

    // N·∫øu ƒëang b·∫•m l·∫°i c√πng n√∫t ƒëang ph√°t ‚Üí d·ª´ng l·∫°i
    if (currentAudio && currentBtn === btn) {
        currentAudio.pause();
        currentAudio = null;
        updatePlayButton(currentBtn, false);
        currentBtn = null;
        return;
    }

    // N·∫øu c√≥ audio kh√°c ƒëang ch·∫°y ‚Üí d·ª´ng
    if (currentAudio) {
        currentAudio.pause();
        updatePlayButton(currentBtn, false);
    }

    // T·∫°o audio m·ªõi
    currentAudio = new Audio(audioUrl);
    currentBtn = btn;
    updatePlayButton(btn, true);

    currentAudio.addEventListener("ended", () => {
        updatePlayButton(btn, false);
        currentAudio = null;
        currentBtn = null;
    });

    currentAudio.play().catch((err) => {
        console.error("Kh√¥ng ph√°t ƒë∆∞·ª£c:", err);
        showToast("Kh√¥ng ph√°t ƒë∆∞·ª£c gi·ªçng ƒë·ªçc", "error");
        updatePlayButton(btn, false);
        currentAudio = null;
        currentBtn = null;
    });
}

function updatePlayButton(btn, isPlaying) {
    const icon = btn.querySelector("i");
    if (!icon) return;
    icon.className = isPlaying ? "fas fa-pause" : "fas fa-play";
}





function nextStep() {
    const steps = document.querySelectorAll('.step-content');
    if (currentStep >= steps.length) return;

    if (!validateCurrentStep()) return;  // ‚õî N·∫øu kh√¥ng h·ª£p l·ªá th√¨ d·ª´ng l·∫°i

    steps[currentStep - 1].classList.add('hidden');
    steps[currentStep].classList.remove('hidden');
    currentStep++;

    updateStepProgress();

    // G·ªçi kh·ªüi t·∫°o ri√™ng t·ª´ng b∆∞·ªõc n·∫øu c·∫ßn
    if (currentStep === 2) initializeVoiceSelection();
    if (currentStep === 3) initializePromptGallery();
    if (currentStep === 4) renderCharacterList();
    // if (currentStep === 5) generateIntro();
    // if (currentStep === 6) renderCharacterList();
    if (currentStep === 7 && window.latestVideoUrl) {
        const finalPreview = document.querySelector('#step-5-content .preview-area');
        finalPreview.innerHTML = '';
        const vid = document.createElement('video');
        vid.src = window.latestVideoUrl;
        vid.controls = true;
        vid.className = 'w-full max-w-2xl mx-auto rounded shadow';
        finalPreview.appendChild(vid);
    }
}

function previousStep() {
    const steps = document.querySelectorAll('.step-content');
    if (currentStep > 1) {
        steps[currentStep - 1].classList.add('hidden');
        steps[currentStep - 2].classList.remove('hidden');
        currentStep--;
        updateStepProgress();
    }
}

function validateCurrentStep() {
    switch (currentStep) {
        case 1:
            const url = document.getElementById('product-url').value.trim();
            const text = document.getElementById('product-text').value.trim();
            const previewContainer = document.getElementById('image-preview');
            const hasPreview = previewContainer.querySelector('div.relative.group');
            if (!url && !text) {
                showToast('Vui l√≤ng nh·∫≠p URL ho·∫∑c n·ªôi dung m√¥ t·∫£ s·∫£n ph·∫©m', 'warning');
                return false;
            }
            if (!hasPreview) {
                showToast('Vui l√≤ng th√™m √≠t nh·∫•t 1 ·∫£nh s·∫£n ph·∫©m', 'warning');
                return false;
            }
            projectData.url = url;
            projectData.text = text;
            break;

        case 2:
            if (!selectedVoice) {
                showToast('Vui l√≤ng ch·ªçn gi·ªçng ƒë·ªçc AI', 'warning');
                return false;
            }
            projectData.voice = selectedVoice;
            break;

        case 3:
            const scriptContent = document.getElementById('script-text').value.trim();
            const wordCount = scriptContent.split(/\s+/).filter(Boolean).length;

            if (!scriptContent) {
                showToast('Vui l√≤ng t·∫°o k·ªãch b·∫£n tr∆∞·ªõc khi ti·∫øp t·ª•c', 'warning');
                return false;
            }

            if (wordCount < 20) {
                showToast('K·ªãch b·∫£n qu√° ng·∫Øn. Vui l√≤ng vi·∫øt √≠t nh·∫•t 20 t·ª´.', 'warning');
                return false;
            } else if (wordCount > 100) {
                showToast('K·ªãch b·∫£n v∆∞·ª£t qu√° 100 t·ª´. Vui l√≤ng r√∫t g·ªçn!', 'warning');
                return false;
            }

            projectData.script = scriptContent;
            projectData.prompt = selectedPrompt || null;
            break;
        case 4:
            if (!selectedModels) {
                showToast('Vui l√≤ng ch·ªçn M·∫´u', 'warning');
                return false;
            }
            projectData.character = selectedModels;
            break;

        case 5:
            const introInput = document.getElementById("intro-input");
            if (!introInput.value) {
                showToast('Vui l√≤ng t·∫°o c√¢u m·ªü ƒë·∫ßu video', 'warning');
                return false;
            }
            break;
        case 6:
            const iframe = document.querySelector('#video-wrapper iframe');
            if (!iframe) {
                showToast('Vui l√≤ng t·∫°o video tr∆∞·ªõc khi ti·∫øp t·ª•c', 'warning');
                return false;
            }
            break;
    }
    return true;
}

function resetForm() {
    document.getElementById('product-url').value = '';
    document.getElementById('product-text').value = '';
    uploadedImages = [];
    renderImagePreviews();
    resetVideoPreview();
}

function createNewVideo() {
    currentStep = 1;
    selectedVoice = null;
    selectedModels = null;
    uploadedImages = [];
    projectData = {
        url: '', text: '', voice: null, template: null,
        settings: { speed: 1, pitch: 0, volume: 80, music: 'none', textStyle: 'modern', transition: 'fade', duration: 30 }
    };
    resetForm();
    document.querySelectorAll('.step-content').forEach(step => step.classList.add('hidden'));
    document.getElementById('step-1-content').classList.remove('hidden');
    updateStepProgress();
    showToast('ƒê√£ t·∫°o d·ª± √°n m·ªõi!', 'success');
}

// Voice selection
const ANH_VIEN_VOICE_ID = 'iSFxP4Z6YNcx9OXl62Ic';
function initializeVoiceSelection() {
    const voiceGrid = document.getElementById('voice-grid');
    // Ch·ªâ 2 gi·ªçng: AI & √Ånh Vi√™n
    allVoices = [
        {
            id: 'default-ai',
            name: 'AI',
            gender: 'female',
            language: 'vietnamese',
            accent: 'M·∫∑c ƒë·ªãnh',
            demo: 'ai_demo.mp3'
        },
        {
            id: 'iSFxP4Z6YNcx9OXl62Ic',
            name: '√Ånh Vi√™n',
            gender: 'female',
            language: 'vietnamese',
            accent: 'Mi·ªÅn B·∫Øc',
            demo: 'anhvien_demo.mp3'
        },
        {
            id: 'HQZkBNMmZF5aISnrU842',
            name: 'MC Kh√°nh Ly',
            gender: 'female',
            language: 'vietnamese',
            accent: 'Mi·ªÅn B·∫Øc',
            demo: 'khanh-ly.mp3'
        }, {
            id: 'BLeuF5fPXWSDAwZScbTY',
            name: 'BS Nhi',
            gender: 'female',
            language: 'vietnamese',
            accent: 'Mi·ªÅn B·∫Øc',
            demo: 'bs_nhi.mp3'
        }, {
            id: 'KpzB5RgCRuVkUlZeY6wb',
            name: 'Tuy·∫øt Trinh',
            gender: 'female',
            language: 'vietnamese',
            accent: 'Mi·ªÅn B·∫Øc',
            demo: 'tuyet-trinh.mp3'
        }
        , {
            id: '3VnrjnYrskPMDsapTr8X',
            name: 'ƒê·∫∑ng T√πng Duy',
            gender: 'male',
            language: 'vietnamese',
            accent: 'Mi·ªÅn B·∫Øc',
            demo: 'dangtungduy.mp3'
        }
        , {
            id: '329254',
            name: 'Kh·∫£ H√¢n',
            gender: 'female',
            language: 'vietnamese',
            accent: 'Mi·ªÅn B·∫Øc',
            demo: 'dangtungduy.mp3'
        }, {
            id: '329253',
            name: 'Linh ƒêan',
            gender: 'female',
            language: 'vietnamese',
            accent: 'Mi·ªÅn B·∫Øc',
            demo: 'dangtungduy.mp3'
        }
        , {
            id: '329251',
            name: '√Åi My',
            gender: 'female',
            language: 'vietnamese',
            accent: 'Mi·ªÅn B·∫Øc',
            demo: 'dangtungduy.mp3'
        }
        , {
            id: '329250',
            name: 'M·ªπ Dung',
            gender: 'female',
            language: 'vietnamese',
            accent: 'Mi·ªÅn B·∫Øc',
            demo: 'dangtungduy.mp3'
        }
    ];

    //     voiceGrid.innerHTML = voices.map(v => `
    //     <div class="voice-card ${v.id === selectedVoice?.id ? 'selected' : ''}"
    //          onclick="selectVoice('${v.id}', this)">
    //       <div class="flex items-center mb-3">
    //         <div class="w-12 h-12 bg-gradient-to-r from-pink-500 to-purple-500 rounded-full
    //                     flex items-center justify-center mr-3">
    //           <i class="fas fa-female text-white text-lg"></i>
    //         </div>
    //         <div>
    //           <h4 class="font-semibold">${v.name}</h4>
    //           <p class="text-sm text-gray-400">${v.accent}</p>
    //         </div>
    //       </div>
    //       <div class="flex justify-between items-center">
    //         <span class="text-xs px-2 py-1 rounded bg-green-500/20 text-green-400">Ti·∫øng Vi·ªát</span>
    //        <button class="voice-play-btn text-blue-400 hover:text-blue-300"
    //         data-filename="${v.demo}"
    //         onclick="handleVoicePlay(event)">
    //             <i class="fas fa-play"></i>
    //         </button>
    //       </div>
    //     </div>
    //   `).join('');
    renderVoiceGrid(allVoices); // Hi·ªÉn th·ªã ban ƒë·∫ßu
}

/* ==================== PROMPT GALLERY ==================== */
const PROMPTS = [
    {
        id: 'review-urgent-solution',
        cat: 'ads',
        title: 'Review ‚ÄúGi·∫£i ph√°p cho v·∫•n ƒë·ªÅ c·∫•p b√°ch‚Äù',
        text: 'N√™u v·∫•n ƒë·ªÅ nh·ª©c nh·ªëi ‚Üí gi·ªõi thi·ªáu gi·∫£i ph√°p ‚Üí k√™u g·ªçi h√†nh ƒë·ªông',
        icon: '/images/icons/icons8-qa-64.png',
        gradient: 'gradient-ai-blue',
        textColor: 'text-white'
    },
    {
        id: 'review-before-after',
        cat: 'danhgia',
        title: 'Review ‚ÄúSo s√°nh tr∆∞·ªõc v√† sau‚Äù',
        text: 'Hi·ªÉn th·ªã b·∫±ng ch·ª©ng tr·ª±c quan (·∫£nh/video tr∆∞·ªõc‚Äìsau) ‚Üí nh·∫•n m·∫°nh thay ƒë·ªïi',
        icon: '/images/icons/ss.png',
        gradient: 'gradient-ai-purple',
        textColor: 'text-white'
    },
    {
        id: 'review-testimonial',
        cat: 'review',
        title: 'Review ‚ÄúCh·ª©ng th·ª±c t·ª´ kh√°ch h√†ng th·ª±c‚Äù',
        text: 'Tr√≠ch d·∫´n c·∫£m nh·∫≠n kh√°ch h√†ng, ch√®n c·∫£nh s·ª≠ d·ª•ng s·∫£n ph·∫©m',
        icon: '/images/icons/dialogue.png',
        gradient: 'gradient-ai-cyan',
        textColor: 'text-black'
    },
    {
        id: 'review-challenge',
        cat: 'review',
        title: 'Review ‚ÄúTh·ª≠ th√°ch th·ª±c t·∫ø‚Äù',
        text: 'Th·ª±c hi·ªán th·ª≠ th√°ch/benchmark v√† tr√¨nh b√†y k·∫øt qu·∫£ ·∫•n t∆∞·ª£ng',
        icon: '/images/icons/challenge.png',
        gradient: 'bg-gradient-to-r from-green-500 to-blue-500',
        textColor: 'text-black'
    },
    {
        id: 'review-journey',
        cat: 'story',
        title: 'Review ‚ÄúH√†nh tr√¨nh kh√°m ph√° s·∫£n ph·∫©m‚Äù',
        text: 'K·ªÉ h√†nh tr√¨nh tr·∫£i nghi·ªám t·ª´ng b∆∞·ªõc, n√™u ƒëi·ªÉm nh·∫•n & c·∫£m x√∫c',
        icon: '/images/icons/discover.png',
        gradient: 'gradient-ai-indigo',
        textColor: 'text-white'
    },
    {
        id: 'review-expert-talk',
        cat: 'review',
        title: 'Review ‚Äúƒê·ªëi tho·∫°i v·ªõi chuy√™n gia‚Äù',
        text: 'Ph·ªèng v·∫•n ng·∫Øn chuy√™n gia, tr√≠ch √Ω ki·∫øn chuy√™n m√¥n + l·ª£i √≠ch',
        icon: '/images/icons/job-interview.png',
        gradient: 'gradient-ai-blue',
        textColor: 'text-white'
    },
    {
        id: 'review-qa',
        cat: 'tip',
        title: 'Review ‚ÄúPhong c√°ch Q&A‚Äù',
        text: 'Li·ªát k√™ c√¢u h·ªèi ph·ªï bi·∫øn ‚Üí tr·∫£ l·ªùi ng·∫Øn g·ªçn, minh h·ªça tr·ª±c quan',
        icon: '/images/icons/verification.png',
        gradient: 'gradient-ai-purple',
        textColor: 'text-white'
    },
    {
        id: 'review-lifestyle',
        cat: 'story',
        title: 'Review ‚ÄúL·ªëi s·ªëng l√Ω t∆∞·ªüng‚Äù',
        text: 'M√¥ t·∫£ l·ªëi s·ªëng/ho·∫°t c·∫£nh, l·ªìng gh√©p s·∫£n ph·∫©m nh∆∞ gi·∫£i ph√°p t·ªëi ∆∞u',
        icon: '/images/icons/idealistic.png',
        gradient: 'gradient-ai-cyan',
        textColor: 'text-black'
    },
    {
        id: 'review-success-story',
        cat: 'story',
        title: 'Review ‚ÄúC√¢u chuy·ªán th√†nh c√¥ng‚Äù',
        text: 'K·ªÉ c√¢u chuy·ªán th√†nh c√¥ng c√≥ th·∫≠t, nh·∫•n vai tr√≤ s·∫£n ph·∫©m, ch·ªët CTA',
        icon: '/images/icons/success.png',
        gradient: 'gradient-ai-green',
        textColor: 'text-black'
    },
    {
        id: 'review-flash-sale',
        cat: 'tip',
        title: 'Review ‚ÄúFlash Sale Countdown‚Äù',
        text: 'ƒê·∫øm ng∆∞·ª£c Flash-sale, n√™u l·ª£i √≠ch nhanh, t·∫°o FOMO, k√™u g·ªçi mua ngay',
        icon: '/images/icons/flash-sale.png',
        gradient: 'gradient-ai-indigo',
        textColor: 'text-white'
    }
];

let selectedPrompt = null;

function initializePromptGallery() {
    const grid = document.getElementById('prompt-grid');
    if (!grid) return;
    grid.innerHTML = PROMPTS.map(p => `
        <div class="prompt-card ${p.gradient} border border-transparent rounded-lg p-4 mb-4 cursor-pointer transition hover:shadow-lg ${p.id === selectedPrompt?.id ? 'ring-2 ring-indigo-500' : ''}"
             onclick="selectPrompt('${p.id}', this)">
            <div class="flex items-start mb-3">
                <div class="w-10 h-10 flex items-center justify-center mr-3 overflow-hidden">
                    <img src="${p.icon}" alt="${p.title} icon" class="w-6 h-6 object-contain" />
                </div>
                <div class="flex-1">
                    <h4 class="font-semibold ${p.textColor}">${p.title}</h4>
                   
                </div>
            </div>
            <p class="text-sm ${p.textColor} mb-3">${p.text}</p>
            <button class="text-blue-600 hover:text-blue-800 text-xs font-medium"
                    onclick="event.stopPropagation(); insertPrompt('${p.id}')">
            </button>
        </div>
  `).join('');
    const scriptText = document.getElementById('script-text').value.trim();
    const wordCount = scriptText.split(/\s+/).length;

    if (wordCount > 100) {
        showToast(`K·ªãch b·∫£n ƒëang c√≥ ${wordCount} t·ª´. Vui l√≤ng r√∫t g·ªçn d∆∞·ªõi 100 t·ª´ ƒë·ªÉ ti·∫øp t·ª•c.`, 'warning');
        return; // ‚ùå Kh√¥ng cho sang b∆∞·ªõc ti·∫øp theo
    }
}

function selectPrompt(promptId, el) {
    document.querySelectorAll('.prompt-card')
        .forEach(c => c.classList.remove('ring-2', 'ring-green-500'));

    el.classList.add('ring-2', 'ring-green-500');
    selectedPrompt = PROMPTS.find(p => p.id === promptId);
    if (!selectedPrompt) return;
    console.log(selectedPrompt.text)
    showToast('ƒê√£ ch·ªçn k·ªãch b·∫£n', 'success');
}

function insertPrompt(promptId) {
    const pr = PROMPTS.find(p => p.id === promptId);
    if (pr) {
        document.getElementById('sample-text').value = pr.text;
        showToast('ƒê√£ ch√®n n·ªôi dung k·ªãch b·∫£n', 'info');
    }
}

function selectPrompt(id, el) {
    document.querySelectorAll('.prompt-card').forEach(c => c.classList.remove('ring-2', 'ring-green-500'));
    el.classList.add('ring-2', 'ring-green-500');
    selectedPrompt = PROMPTS.find(p => p.id === id);
    showToast('ƒê√£ ch·ªçn k·ªãch b·∫£n', 'success');
}

function filterPrompts(cat) {
    console.log("Filtering by category:", cat);

    // C·∫≠p nh·∫≠t tr·∫°ng th√°i active cho c√°c n√∫t
    document.querySelectorAll('.prompt-cat-btn').forEach(b => {
        b.classList.toggle('active', b.dataset.cat === cat);
    });

    // L·ªçc c√°c prompt card
    document.querySelectorAll('.prompt-card').forEach(card => {
        const promptId = card.getAttribute('onclick').match(/'([^']+)'/)[1];
        const prompt = PROMPTS.find(p => p.id === promptId);

        if (!prompt) {
            card.classList.add('hidden');
            return;
        }

        if (cat === 'all' || prompt.cat === cat) {
            card.classList.remove('hidden');
        } else {
            card.classList.add('hidden');
        }
    });
}

// function filterPrompts(cat) {
//     console.log("Cat",cat);

//   // C·∫≠p nh·∫≠t tr·∫°ng th√°i active cho c√°c n√∫t
//   document.querySelectorAll('.prompt-cat-btn').forEach(b => {
//     b.classList.toggle('active', b.dataset.cat === cat);
//   });

//   // L·ªçc c√°c prompt card
//   document.querySelectorAll('.prompt-card').forEach(card => {
//     if (cat === 'all') {
//       card.classList.remove('hidden');
//     } else {
//         card.classList.remove('hidden');
//     }
//   });
// }

// Template gallery
function initializeModels() {
    // ‚úÖ Reset template n·∫øu kh√¥ng d√πng n·ªØa
    selectedModels = null;

    // ‚úÖ N·∫øu c√≥ kh·ªëi HTML template-grid th√¨ ·∫©n n√≥ ƒëi, tr√°nh b·ªã tr·ªëng ho·∫∑c l·ªói
    const templateGrid = document.getElementById('template-grid');
    if (templateGrid) {
        templateGrid.classList.add('hidden'); // ·∫®n n·∫øu t·ªìn t·∫°i
    }

    // üëâ Kh√¥ng l√†m g√¨ th√™m, ƒë·ªÉ b∆∞·ªõc 4 v·∫´n ch·∫°y m∆∞·ª£t
}
const characters = [
    {
        id: 'ha-chi',
        name: 'H·∫° Chi',
        image: 'images/models/ha-chi.png',
        gender: 'female',
        emotion: 'suspicious',
        video: 'sample/ha-chi.mp4'
    },
    {
        id: 'bao-tran',
        name: 'B·∫£o Tr√¢n',
        image: 'images/models/bao-tran.png',
        gender: 'female',
        emotion: 'sorrowful',
        video: 'sample/bao-tran.mp4'
    },
    {
        id: 'tuong-vy',
        name: 'T∆∞·ªùng Vy',
        image: 'images/models/tuong-vy.png',
        gender: 'female',
        emotion: 'happy',
        video: 'sample/tuong-vy.mp4'
    },
    {
        id: 'quang-minh',
        name: 'Quang Minh',
        image: 'images/models/quang-minh.png',
        gender: 'male',
        emotion: 'happy',
        video: 'sample/quang-minh.mp4'
    },
    {
        id: 'van-anh',
        name: 'V√¢n Anh',
        image: 'images/models/van-anh.png',
        gender: 'female',
        emotion: 'frustrated',
        video: 'sample/van-anh.mp4'
    },
    {
        id: 'trung-kien',
        name: 'Trung Ki√™n',
        image: 'images/models/trung-kien.png',
        gender: 'male',
        emotion: 'serious',
        video: 'sample/trung-kien.mp4'
    },
    {
        id: 'ngoc-linh',
        name: 'Ng·ªçc Linh',
        image: 'images/models/ngoc-linh.png',
        gender: 'female',
        emotion: 'happy',
        video: 'sample/ngoc-linh.mp4'
    },
    {
        id: 'anh-vien',
        name: '√Ånh Vi√™n',
        image: 'images/models/anh-vien.png',
        gender: 'female',
        emotion: 'sorrowful',
        video: 'sample/anh-vien.mp4'
    }, {
        id: 'thuy-chi',
        name: 'Th√πy Chi',
        image: 'images/models/thuy-chi.png',
        gender: 'female',
        emotion: 'sorrowful',
        video: 'sample/thuy-chi.mp4'
    }
    , {
        id: 'thu-thuy',
        name: 'Thu Th·ªßy',
        image: 'images/models/thu-thuy.png',
        gender: 'female',
        emotion: 'sorrowful',
        video: 'sample/thu-thuy.mp4'
    }
    , {
        id: 'diem-quynh',
        name: 'Di·ªÖm Qu·ª≥nh',
        image: 'images/models/diem-quynh.png',
        gender: 'female',
        emotion: 'sorrowful',
        video: 'sample/diem-quynh.mp4'
    }, {
        id: 'huyen-trang',
        name: 'Huy·ªÅn Trang',
        image: 'images/models/huyen-trang.png',
        gender: 'female',
        emotion: 'sorrowful',
        video: 'sample/huyen-trang.mp4'
    }, {
        id: 'ngoc-anh',
        name: 'Ng·ªçc Anh',
        image: 'images/models/ngoc-anh.png',
        gender: 'female',
        emotion: 'sorrowful',
        video: 'sample/ngoc-anh.mp4'
    }
    , {
        id: 'bao-han',
        name: 'B·∫£o H√¢n',
        image: 'images/models/bao-han.png',
        gender: 'female',
        emotion: 'sorrowful',
        video: 'sample/bao-han.mp4'
    }
    , {
        id: 'anh-tuyet',
        name: '√Ånh Tuy·∫øt',
        image: 'images/models/anh-tuyet.png',
        gender: 'female',
        emotion: 'sorrowful',
        video: 'sample/anh-tuyet.mp4'
    }, {
        id: 'khanh-chi',
        name: 'Kh√°nh Chi',
        image: 'images/models/khanh-chi.png',
        gender: 'female',
        emotion: 'sorrowful',
        video: 'sample/khanh-chi.mp4'
    }
];


let selectedModels = null;
function renderCharacterList() {
    const gender = document.getElementById('filter-gender')?.value || '';
    const emotion = document.getElementById('filter-emotion')?.value || '';
    const container = document.getElementById("character-list");

    const filtered = characters.filter(c => {
        return (!gender || c.gender === gender) &&
            (!emotion || c.emotion === emotion);
    });

    container.innerHTML = filtered.map(c => `
  <div class="relative mt-4 bg-white cursor-pointer hover:border-blue-400 rounded-lg shadow-md overflow-hidden w-full" onclick="selectCharacter('${c.id}', this)">
<div class="w-full bg-gray-100 overflow-hidden" style="aspect-ratio:9/16">
  <img src="${c.image}"
       alt="${c.name}"
       class="w-full h-full object-cover object-center" />
</div>
  <div class="w-full bg-white">
    <p class="text-sm font-medium text-black text-center bg-white py-3 min-h-[44px]">
    ${c.name}
  </p>
  </div>
</div>
  `).join('');
}

function selectCharacter(id, el) {
    selectedModels = id;
    projectData.character = id;
    // Clear old selection
    document.querySelectorAll("#character-list .ring-2").forEach(e => {
        e.classList.remove("ring-2", "ring-blue-500");
    });
    el.classList.add("ring-2", "ring-blue-500");

    // L·∫•y character t∆∞∆°ng ·ª©ng
    const char = characters.find(c => c.id === id);
    if (char && char.video) {
        const video = document.getElementById("step5-video-preview");
        if (video) {
            video.src = char.video;
            video.load();
        }
    }
}


async function analyzeUrl(event) {
    // resetVideoPreview();

    const urlInput = document.getElementById('product-url');
    const url = urlInput.value.trim();
    if (!url) return showToast('Vui l√≤ng nh·∫≠p URL s·∫£n ph·∫©m', 'warning');
    if (!validateUrl(url)) return showToast('URL kh√¥ng h·ª£p l·ªá', 'error');

    // ==== M·ªöI: ki·ªÉm tra s·ªë ·∫£nh hi·ªán c√≥ ====
    const preview = document.getElementById('image-preview');
    const currentCount = preview.querySelectorAll('div.relative.group').length;
    const maxAllowed = 10;
    if (currentCount >= maxAllowed) {
        return showToast(`B·∫°n ch·ªâ ƒë∆∞·ª£c t·ªëi ƒëa ${maxAllowed} ·∫£nh`, 'warning');
    }
    // ==== h·∫øt ph·∫ßn m·ªõi ====

    const btn = document.getElementById('analyze-btn') || event?.target;
    const stopLoading = showLoading(btn);

    // const API_BASE_URL = window.APP_CONFIG?.API_BASE_URL || '${API_BASE_URL}';
    let res;
    const token = localStorage.getItem('jwt');
    try {
        res = await fetch(`${API_BASE_URL}/api/scrape`, {
            method: 'POST',
            headers: {
                "Content-Type": "application/json",
                'Authorization': `Bearer ${token}`
            },
            body: JSON.stringify({ url })
        }).then(r => r.json());
    } catch (err) {
        stopLoading();
        console.error(err);
        return showToast('L·ªói k·∫øt n·ªëi ƒë·∫øn API', 'error');
    }
    stopLoading();

    if (!res.success) {
        return showToast(res.message || 'Ph√¢n t√≠ch th·∫•t b·∫°i', 'error');
    }

    // ==== D·ªÆ LI·ªÜU TR·∫¢ V·ªÄ: title + images (d·∫°ng URL g·ªëc) ====
    const { title, images = [] } = res.data;
    if (!images.length) return showToast('Kh√¥ng c√≥ ·∫£nh n√†o ƒë·ªÉ hi·ªÉn th·ªã', 'warning');

    document.getElementById('sample-text').value = title || '';
    document.getElementById('product-title').innerText = title || '';
    projectData.url = url;
    projectData.text = title;

    preview.classList.remove('hidden');

    const available = maxAllowed - preview.querySelectorAll('div.relative.group').length;
    if (available <= 0) {
        return showToast(`B·∫°n ch·ªâ ƒë∆∞·ª£c t·ªëi ƒëa ${maxAllowed} ·∫£nh`, 'warning');
    }

    images.slice(0, available).forEach((imgUrl, index) => {
        const wrapper = document.createElement('div');
        wrapper.className = 'relative group';

        const img = document.createElement('img');
        img.dataset.realpath = imgUrl;
        img.src = imgUrl;
        img.alt = `Product Image ${index + 1}`;
        img.className =
            'rounded w-full h-auto object-cover cursor-pointer transition-transform duration-200 group-hover:scale-105';
        img.title = 'B·∫•m ƒë·ªÉ t·∫£i ·∫£nh v·ªÅ';

        img.addEventListener('click', () => {
            const a = document.createElement('a');
            a.href = imgUrl;
            a.download = `image_${index + 1}.jpg`;
            a.click();
        });
        const downloadBtn = document.createElement('button');
        downloadBtn.innerHTML = '‚Üì';
        downloadBtn.title = 'T·∫£i ·∫£nh n√†y';
        downloadBtn.className =
            'absolute top-1 right-8 w-6 h-6 rounded-full bg-blue-600 bg-opacity-70 text-white font-bold flex items-center justify-center text-sm hover:bg-opacity-90 transition-all';

        downloadBtn.addEventListener('click', () => {
            const a = document.createElement('button');
            a.href = img.dataset.realpath || img.src;  // ƒë·∫£m b·∫£o l·∫•y ƒë√∫ng link g·ªëc
            a.download = `image_${index + 1}.jpg`;
            a.target = '_blank';
            a.rel = 'noopener';
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
        });
        const closeBtn = document.createElement('button');
        closeBtn.textContent = '√ó';
        closeBtn.className =
            'absolute top-1 right-1 w-6 h-6 rounded-full bg-black bg-opacity-60 text-white font-bold flex items-center justify-center text-sm hover:bg-opacity-90 transition-all';
        closeBtn.addEventListener('click', () => wrapper.remove());

        wrapper.appendChild(img);
        wrapper.appendChild(downloadBtn);
        wrapper.appendChild(closeBtn);
        preview.appendChild(wrapper);
    });

    showToast('Ph√¢n t√≠ch URL th√†nh c√¥ng!', 'success');
}


function renderImagePreviews() {
    const container = document.getElementById('image-preview');
    container.innerHTML = '';
    uploadedImages.forEach((img, index) => {
        const wrapper = document.createElement('div');
        wrapper.className = 'relative group';
        const image = document.createElement('img');
        image.src = img.url || URL.createObjectURL(img);
        image.alt = img.name || `image_${index}`;
        image.className = 'rounded w-full h-auto object-cover cursor-pointer';
        const closeBtn = document.createElement('button');
        closeBtn.innerHTML = '√ó';
        closeBtn.className = 'absolute top-1 right-1 w-6 h-6 bg-black bg-opacity-60 text-white flex items-center justify-center rounded-full';
        closeBtn.onclick = () => {
            uploadedImages.splice(index, 1);
            renderImagePreviews();
        };
        wrapper.appendChild(image);
        wrapper.appendChild(closeBtn);
        container.appendChild(wrapper);
    });
}

// function handleImageUpload(event) {
//     const files = event.target.files;
//     const preview = document.getElementById('image-preview');

//     if (!files || files.length === 0) return;

//     // ƒê·∫øm ·∫£nh ƒëang c√≥
//     const currentImageCount = preview.querySelectorAll('img').length;
//     const maxAllowed = 10;

//     if (currentImageCount >= maxAllowed) {
//         showToast(`B·∫°n ch·ªâ ƒë∆∞·ª£c ch·ªçn t·ªëi ƒëa ${maxAllowed} ·∫£nh`, 'warning');
//         return;
//     }

//     const remainingSlots = maxAllowed - currentImageCount;
//     const filesToAdd = Array.from(files).slice(0, remainingSlots);

//     preview.classList.remove('hidden');

//     filesToAdd.forEach((file, index) => {
//         if (!file.type.startsWith('image/')) return;

//         const reader = new FileReader();
//         reader.onload = (e) => {
//             const dataUri = e.target.result;
//             const wrapper = document.createElement('div');
//             wrapper.className = 'relative group';

//             const img = document.createElement('img');
//             // img.src = e.target.result;
//             img.src = dataUri;
//             img.alt = file.name;
//             img.dataset.realpath = dataUri;
//             img.className = 'rounded w-full h-auto object-cover cursor-pointer transition-transform duration-200 group-hover:scale-105';

//             img.addEventListener('click', () => {
//                 const a = document.createElement('a');
//                 a.href = img.src;
//                 a.download = file.name;
//                 a.click();
//             });

//             const closeBtn = document.createElement('button');
//             closeBtn.innerHTML = '√ó';
//             closeBtn.className = `
//         absolute top-1 right-1 w-6 h-6 rounded-full 
//         bg-black bg-opacity-60 text-white font-bold 
//         flex items-center justify-center text-sm
//         hover:bg-opacity-90 transition-all
//       `;
//             closeBtn.addEventListener('click', () => {
//                 wrapper.remove();
//             });

//             wrapper.appendChild(img);
//             wrapper.appendChild(closeBtn);
//             preview.appendChild(wrapper);

//             uploadedImages.push(file);
//         };
//         reader.readAsDataURL(file);
//     });

// }
async function handleImageUpload(event) {
    const files = event.target.files;
    const preview = document.getElementById('image-preview');
    if (!files || files.length === 0) return;

    const currentImageCount = preview.querySelectorAll('img').length;
    const maxAllowed = 10;
    if (currentImageCount >= maxAllowed) {
        showToast(`B·∫°n ch·ªâ ƒë∆∞·ª£c ch·ªçn t·ªëi ƒëa ${maxAllowed} ·∫£nh`, 'warning');
        return;
    }

    const token = localStorage.getItem('jwt');
    const remainingSlots = maxAllowed - currentImageCount;
    const filesToUpload = Array.from(files).slice(0, remainingSlots);

    preview.classList.remove('hidden');

    for (const file of filesToUpload) {
        const formData = new FormData();
        formData.append('file', file);
        const userId = JSON.parse(localStorage.getItem("auth_data") || "{}").id;
        try {
            const res = await fetch(`${API_BASE_URL}/api/upload-image`, {
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'X-User-Id': userId
                },
                body: formData
            });
            const data = await res.json();
            if (data.success && data.url) {
                const wrapper = document.createElement('div');
                wrapper.className = 'relative group';

                const img = document.createElement('img');
                const fullUrl = data.url.startsWith('/')
                    ? `${location.origin}${data.url}`
                    : data.url;
                img.src = fullUrl;
                img.alt = file.name;
                img.dataset.realpath = fullUrl;
                img.className = 'rounded w-full h-auto object-cover cursor-pointer transition-transform duration-200 group-hover:scale-105';

                img.addEventListener('click', () => {
                    const a = document.createElement('a');
                    a.href = data.url;
                    a.download = file.name;
                    a.click();
                });

                const closeBtn = document.createElement('button');
                closeBtn.innerHTML = '√ó';
                closeBtn.className = `
                    absolute top-1 right-1 w-6 h-6 rounded-full 
                    bg-black bg-opacity-60 text-white font-bold 
                    flex items-center justify-center text-sm
                    hover:bg-opacity-90 transition-all
                `;
                closeBtn.addEventListener('click', () => wrapper.remove());

                wrapper.appendChild(img);
                wrapper.appendChild(closeBtn);
                preview.appendChild(wrapper);
            } else {
                showToast(data.message || 'Upload th·∫•t b·∫°i', 'error');
            }
        } catch (err) {
            console.error(err);
            showToast('L·ªói khi upload ·∫£nh', 'error');
        }
    }
}

function generateScript() {
    const textarea = document.getElementById('sample-text');
    const outTextarea = document.getElementById('script-text');
    const promptTemplate = (selectedPrompt?.text || '').trim();
    const userText = textarea.value.trim();
    const duration = projectData.settings.duration;

    if (!promptTemplate) {
        showToast('Vui l√≤ng ch·ªçn k·ªãch b·∫£n m·∫´u tr∆∞·ªõc khi t·∫°o k·ªãch b·∫£n', 'warning');
        return;
    }
    if (duration == 15) {
        max_char_count = 45;
    }
    // } else if (duration == 30) {
    //     max_char_count = 450;
    // } else if (duration == 60) {
    //     max_char_count = 450;
    // }

    max_char_count = 45;
    document.getElementById('loading-overlay').classList.remove('hidden');
    document.getElementById('processing-desc').textContent = 'ƒêang t·∫°o k·ªãch b·∫£n video';
    const requestScript = {
        promptTemplate,
        userText,
        max_char_count
    };
    console.log("generate-script", requestScript)
    const token = localStorage.getItem('jwt');
    fetch(`${API_BASE_URL}/api/generate-script`, {
        method: 'POST',
        headers: {
            "Content-Type": "application/json",
            'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify(requestScript)
    })
        .then(async res => {
            const data = await res.json();
            console.log(requestScript)    // lu√¥n parse tr∆∞·ªõc
            if (!res.ok) throw new Error(data.message || 'HTTP error');   // ‚¨ÖÔ∏è ch·ªâ check HTTP

            // ‚úÖ TH√ÄNH C√îNG
            document.getElementById('loading-overlay').classList.add('hidden');
            outTextarea.value = data.script;
            //   document.getElementById('script-preview').textContent = data.script;
            //   document.getElementById('script-preview').classList.remove('hidden');
            projectData.script = data.script;
            showToast('ƒê√£ sinh k·ªãch b·∫£n AI!', 'success');
        })
        .catch(err => {
            console.error(err);
            document.getElementById('loading-overlay').classList.add('hidden');
            showToast(err.message || 'T·∫°o k·ªãch b·∫£n th·∫•t b·∫°i', 'error');
        });
}

async function downloadVideo() {
    // const videoUrl = videoUrl;
    if (!videoUrl) {
        showToast('Kh√¥ng t√¨m th·∫•y video ƒë·ªÉ t·∫£i xu·ªëng', 'error');
        return;
    }

    showToast('ƒêang t·∫£i video...', 'info');

    try {
        /* 1‚ÄÜ‚Äî‚ÄÜt·∫£i file d∆∞·ªõi d·∫°ng blob (CORS ph·∫£i cho GET) */
        const resp = await fetch(videoUrl, { mode: 'cors' });
        if (!resp.ok) throw new Error('Network error');
        const blob = await resp.blob();

        /* 2‚ÄÜ‚Äî‚ÄÜt·∫°o URL t·∫°m, bu·ªôc t·∫£i xu·ªëng */
        const blobUrl = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = blobUrl;
        a.download = '';   // t√™n l∆∞u tr√™n m√°y
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(blobUrl);    // gi·∫£i ph√≥ng b·ªô nh·ªõ

        showToast('Video ƒë√£ ƒë∆∞·ª£c t·∫£i xong!', 'success');
    } catch (e) {
        console.error(e);
        showToast('T·∫£i video th·∫•t b·∫°i', 'error');
    }
}



// Select template


let currentVideoUrl = '';
async function downloadVideo(url = currentVideoUrl) {
    // Cho ph√©p truy·ªÅn URL tr·ª±c ti·∫øp (n·∫øu c·∫ßn),
    // c√≤n kh√¥ng th√¨ d√πng URL ƒë√£ l∆∞u ·ªü b∆∞·ªõc 1.
    if (!url) {
        showToast('Kh√¥ng t√¨m th·∫•y video ƒë·ªÉ t·∫£i xu·ªëng', 'error');
        return;
    }

    showToast('ƒêang t·∫£i video...', 'info');

    try {
        /* 1‚Ää‚Äî‚Äät·∫£i file d∆∞·ªõi d·∫°ng blob (server c·∫ßn m·ªü Access-Control-Allow-Origin) */
        const resp = await fetch(url, { mode: 'cors' });
        if (!resp.ok) throw new Error(`HTTP ${resp.status}`);
        const blob = await resp.blob();

        /* 2‚Ää‚Äî‚Äät·∫°o URL t·∫°m v√† bu·ªôc t·∫£i xu·ªëng */
        const blobUrl = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = blobUrl;
        a.download = 'download.mp4';           // t√™n l∆∞u tr√™n m√°y
        a.click();
        URL.revokeObjectURL(blobUrl);            // gi·∫£i ph√≥ng b·ªô nh·ªõ

        showToast('Video ƒë√£ ƒë∆∞·ª£c t·∫£i xong!', 'success');
    } catch (err) {
        console.error(err);
        showToast('T·∫£i video th·∫•t b·∫°i', 'error');
    }
}

function shareVideo(url = currentVideoUrl) {
    if (!url) {
        showToast('Kh√¥ng t√¨m th·∫•y video ƒë·ªÉ chia s·∫ª', 'error');
        return;
    }

    // Copy to clipboard
    navigator.clipboard.writeText(url).then(() => {
        showToast('ƒê√£ sao ch√©p li√™n k·∫øt chia s·∫ª!', 'success');
    }).catch(err => {
        console.error(err);
        showToast('Kh√¥ng th·ªÉ sao ch√©p li√™n k·∫øt', 'error');
    });
}

// === TI·∫æN ƒê·ªò THANH ===
function startProgressBar(duration = 10000) {
    const progressContainer = document.getElementById("progress-container");
    const progressBar = document.getElementById("progress-bar");
    if (!progressContainer || !progressBar) return;

    progressContainer.classList.remove("hidden");
    progressBar.style.width = "0%";
    progressBar.textContent = "0%";

    let percent = 0;
    const interval = 250;
    const increment = 100 / (duration / interval);

    const timer = setInterval(() => {
        percent += increment;
        if (percent >= 100) {
            percent = 100;
            clearInterval(timer);
        }
        progressBar.style.width = `${percent.toFixed(0)}%`;
        progressBar.textContent = `${percent.toFixed(0)}%`;
    }, interval);
}

// async function generateVideo() {
//     const preview = document.getElementById('image-preview');
//     const imageSet = new Set();
//     const image_paths = Array.from(preview.querySelectorAll('img'))
//         .map(img => img.dataset.realpath || img.src)
//         .filter(p => !imageSet.has(p) && imageSet.add(p));

//     const script = projectData.script || document.getElementById('script-text').value.trim();
//     const transition = projectData.settings.transition || 'fade';
//     const music = projectData.settings.music || 'none';
//     let text = document.getElementById("intro-input").value.trim();
//     if (!text) text = document.getElementById("intro-select").value;
//     const sample = projectData.character;

//     if (!script) return showToast('Vui l√≤ng t·∫°o k·ªãch b·∫£n tr∆∞·ªõc', 'warning');
//     if (image_paths.length === 0) return showToast('Vui l√≤ng ch·ªçn √≠t nh·∫•t 1 ·∫£nh', 'warning');

//     const body = {
//         script,
//         image_paths,
//         voice_id: projectData.voice?.id,
//         transition,
//         text,
//         bg_music: music !== 'none' ? music : null,
//         sample,
//         y_offset: 150,
//         font_size: 48
//     };
//     console.log("body", body)
//     const token = localStorage.getItem('jwt');
//     const progressContainer = document.getElementById("progress-container");
//     const progressBar = document.getElementById("progress-bar");
//     progressContainer.classList.remove("hidden");
//     startProgressBar();
//     console.log("data", body)
//     let data;
//     try {
//         const res = await fetch(`${API_BASE_URL}/api/generate-full-video`, {
//             method: 'POST',
//             headers: {
//                 'Content-Type': 'application/json',
//                 'Authorization': `Bearer ${token}`
//             },
//             body: JSON.stringify(body)
//         });
//         data = await res.json();
//     } catch (err) {
//         progressContainer.classList.add("hidden");
//         console.error(err);
//         return showToast('L·ªói k·∫øt n·ªëi khi t·∫°o video', 'error');
//     }

//     if (!data.success) {
//         progressContainer.classList.add("hidden");
//         localStorage.removeItem("auth_data");
//         return showToast(data.message || data.error || 'T·∫°o video th·∫•t b·∫°i', 'error');
//     }


//     showToast('üéâ T·∫°o video th√†nh c√¥ng!', 'success');
//     localStorage.removeItem("auth_data"); // ‚ùå Xo√° d·ªØ li·ªáu c≈©

//     // ‚úÖ G·ªçi l·∫°i API ƒë·ªÉ l·∫•y th√¥ng tin user m·ªõi
//      try {
//         const res = await fetch(`${API_BASE_URL}/api/user`, {
//           method: "GET",
//           headers: { Authorization: `Bearer ${token}` }
//         });
//         const data = await res.json();
//         if (data.success) {
//           cachedUser = data.user;
//           localStorage.setItem("auth_data", JSON.stringify(data.user));
//           fillDataUser(cachedUser);  // ‚úÖ truy·ªÅn ƒë√∫ng user
//           return cachedUser;
//         } else {
//           console.warn("‚ùå Kh√¥ng l·∫•y ƒë∆∞·ª£c th√¥ng tin user:", data.error);
//           return null;
//         }
//       } catch (err) {
//         console.error("‚ùå L·ªói k·∫øt n·ªëi:", err);
//         return null;
//       }

//     const wrapper = document.getElementById('video-wrapper');
//     wrapper.innerHTML = '';
//     const videoUrl = data.video_url;
//     currentVideoUrl = videoUrl;
//     const iframe = document.createElement('iframe');
//     progressBar.style.width = "100%";
//     progressBar.textContent = "100%";
//     progressContainer.classList.add("hidden");
//     iframe.src = videoUrl.includes('/view') ? videoUrl.replace('/view', '/preview') : videoUrl;
//     iframe.width = '100%';
//     iframe.height = '480';
//     iframe.allow = 'autoplay; fullscreen';
//     iframe.className = 'rounded';
//     wrapper.appendChild(iframe);

//     const downloadBtn = document.getElementById('download-video-btn');
//     if (downloadBtn) {
//         downloadBtn.classList.remove('hidden');
//         downloadBtn.onclick = () => window.open(videoUrl, '_blank');
//     }

//     const audioUrl = data.voice_url;
//     const downloadAudioBtn = document.getElementById('download-audio-btn');
//     if (audioUrl && downloadAudioBtn) {
//         downloadAudioBtn.classList.remove('hidden');
//         downloadAudioBtn.onclick = () => window.open(audioUrl, '_blank');
//     }

//     projectData.video_url = videoUrl;
//     projectData.voice_url = audioUrl;

// }


async function generateVideo() {
    const preview = document.getElementById('image-preview');
    const imageSet = new Set();
    const image_paths = Array.from(preview.querySelectorAll('img'))
        .map(img => img.dataset.realpath || img.src)
        .filter(p => !imageSet.has(p) && imageSet.add(p));

    const script = projectData.script || document.getElementById('script-text').value.trim();
    const transition = projectData.settings.transition || 'fade';
    const music = projectData.settings.music || 'none';
    let text = document.getElementById("intro-input").value.trim();
    if (!text) text = document.getElementById("intro-select").value;
    const sample = projectData.character;

    if (!script) return showToast('Vui l√≤ng t·∫°o k·ªãch b·∫£n tr∆∞·ªõc', 'warning');
    if (image_paths.length === 0) return showToast('Vui l√≤ng ch·ªçn √≠t nh·∫•t 1 ·∫£nh', 'warning');

    const body = {
        script,
        image_paths,
        voice_id: projectData.voice?.id,
        transition,
        text,
        bg_music: music !== 'none' ? music : null,
        sample,
        y_offset: 150,
        font_size: 48
    };

    const token = localStorage.getItem('jwt');
    const progressContainer = document.getElementById("progress-container");
    const progressBar = document.getElementById("progress-bar");
    progressContainer.classList.remove("hidden");
    startProgressBar();

    let videoData;
    try {
        const res = await fetch(`${API_BASE_URL}/api/generate-full-video`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${token}`
            },
            body: JSON.stringify(body)
        });
        videoData = await res.json();
    } catch (err) {
        progressContainer.classList.add("hidden");
        console.error(err);
        return showToast('L·ªói k·∫øt n·ªëi khi t·∫°o video', 'error');
    }

    if (!videoData.success) {
        progressContainer.classList.add("hidden");
        localStorage.removeItem("auth_data");
        return showToast(videoData.message || videoData.error || 'T·∫°o video th·∫•t b·∫°i', 'error');
    }

    showToast('üéâ T·∫°o video th√†nh c√¥ng!', 'success');
    localStorage.removeItem("auth_data"); // ‚ùå Xo√° d·ªØ li·ªáu c≈©

    // ‚úÖ G·ªçi l·∫°i API ƒë·ªÉ l·∫•y th√¥ng tin user m·ªõi
    try {
        const res = await fetch(`${API_BASE_URL}/api/user`, {
            method: "GET",
            headers: { Authorization: `Bearer ${token}` }
        });
        const userRes = await res.json();
        if (userRes.success) {
            cachedUser = userRes.user;
            localStorage.setItem("auth_data", JSON.stringify(userRes.user));
            fillDataUser?.(cachedUser); // C·∫≠p nh·∫≠t UI n·∫øu c√≥
        } else {
            console.warn("‚ùå Kh√¥ng l·∫•y ƒë∆∞·ª£c th√¥ng tin user:", userRes.error);
        }
    } catch (err) {
        console.error("‚ùå L·ªói k·∫øt n·ªëi khi l·∫•y user:", err);
    }

    // ‚úÖ Hi·ªÉn th·ªã video
    const wrapper = document.getElementById('video-wrapper');
    wrapper.innerHTML = '';
    const videoUrl = videoData.video_url;
    currentVideoUrl = videoUrl;
    const iframe = document.createElement('iframe');
    progressBar.style.width = "100%";
    progressBar.textContent = "100%";
    progressContainer.classList.add("hidden");
    iframe.src = videoUrl.includes('/view') ? videoUrl.replace('/view', '/preview') : videoUrl;
    iframe.width = '100%';
    iframe.height = '480';
    iframe.allow = 'autoplay; fullscreen';
    iframe.className = 'rounded';
    wrapper.appendChild(iframe);

    const downloadBtn = document.getElementById('download-video-btn');
    if (downloadBtn) {
        downloadBtn.classList.remove('hidden');
        downloadBtn.onclick = () => window.open(videoUrl, '_blank');
    }

    const audioUrl = videoData.voice_url;
    const downloadAudioBtn = document.getElementById('download-audio-btn');
    if (audioUrl && downloadAudioBtn) {
        downloadAudioBtn.classList.remove('hidden');
        downloadAudioBtn.onclick = () => window.open(audioUrl, '_blank');
    }

    projectData.video_url = videoUrl;
    projectData.voice_url = audioUrl;
}




function selectTemplate(templateId, element) {
    // Remove previous selection
    document.querySelectorAll('.template-card').forEach(card => {
        card.classList.remove('ring-2', 'ring-blue-500');
    });

    // Add selection to clicked card
    element.classList.add('ring-2', 'ring-blue-500');

    // Store selected template
    selectedModels = { id: templateId };

    showToast('ƒê√£ ch·ªçn template', 'success');
}
// Tab switching
function switchTab(tabName) {
    // Update tab buttons
    document.querySelectorAll('.tab-btn').forEach(btn => {
        btn.classList.remove('active');
    });
    event.target.classList.add('active');

    // Show/hide tab content
    document.querySelectorAll('.tab-content').forEach(content => {
        content.classList.add('hidden');
    });
    document.getElementById(tabName + '-tab').classList.remove('hidden');
}
function resetAnalyzeResult() {
    // ti√™u ƒë·ªÅ + gi√°
    document.getElementById('product-title').textContent = '';
    document.getElementById('product-price').textContent = '';

    // n·ªôi dung m√¥ t·∫£ nh·∫≠p tay
    document.getElementById('sample-text').value = '';
    document.getElementById('script-text').value = '';

    // ·∫£nh preview
    const preview = document.getElementById('image-preview');
    preview.innerHTML = '';
    preview.classList.add('hidden');
    uploadedImages = [];

    // video preview + n√∫t Next
    resetVideoPreview();

    // xo√° prompt, URL, text ƒë√£ l∆∞u
    selectedPrompt = null;
    projectData.url = '';
    projectData.text = '';
    projectData.script = '';
}

// Initialize dashboard
document.addEventListener('DOMContentLoaded', function () {
    // Load saved language preference


    // Initialize step progress
    updateStepProgress();
    initializeVoiceSelection();
    filterPrompts('all');
    // Add CSS classes for voice and template buttons
    const style = document.createElement('style');
    style.textContent = `
        .voice-category-btn {
            padding: 8px 16px;
            background: rgba(31, 41, 55, 0.5);
            border: 2px solid #374151;
            border-radius: 8px;
            color: #9CA3AF;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        
        .voice-category-btn:hover {
            border-color: #3B82F6;
            color: white;
        }
        
        .voice-category-btn.active {
            border-color: #3B82F6;
            background: rgba(59, 130, 246, 0.1);
            color: #3B82F6;
        }
        
        

        .text-style-btn, .duration-btn {
            padding: 8px 16px;
            background: rgba(31, 41, 55, 0.5);
            border: 2px solid #374151;
            border-radius: 8px;
            color: #9CA3AF;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        
        .text-style-btn:hover, .duration-btn:hover {
            border-color: #3B82F6;
            color: white;
        }
        
        .text-style-btn.active, .duration-btn.active {
            border-color: #3B82F6;
            background: rgba(59, 130, 246, 0.1);
            color: #3B82F6;
        }
        
        .thumbnail-option {
            cursor: pointer;
            border: 2px solid transparent;
            border-radius: 8px;
            overflow: hidden;
            transition: all 0.3s ease;
        }
        
        .thumbnail-option:hover {
            border-color: #3B82F6;
        }
        
        .thumbnail-option.active {
            border-color: #3B82F6;
            box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.2);
        }
    `;
    document.head.appendChild(style);

    document.addEventListener('click', function (e) {
        // TEXT STYLE
        if (e.target.classList.contains('text-style-btn')) {
            document.querySelectorAll('.text-style-btn').forEach(btn => btn.classList.remove('active'));
            e.target.classList.add('active');
            return;
        }

        // QUALITY OPTION
        if (e.target.classList.contains('quality-option')) {
            document.querySelectorAll('.quality-option').forEach(opt => opt.classList.remove('selected'));
            e.target.classList.add('selected');
            return;
        }

        // THUMBNAIL OPTION
        if (e.target.classList.contains('thumbnail-option')) {
            document.querySelectorAll('.thumbnail-option').forEach(opt => opt.classList.remove('active'));
            e.target.classList.add('active');
            return;
        }

        // DURATION
        if (e.target.classList.contains('duration-btn')) {
            const dur = e.target.dataset.duration;

            if (dur === '30' || dur === '60') {
                return showToast('‚õî B·∫°n c·∫ßn k√≠ch ho·∫°t t√†i kho·∫£n ƒë·ªÉ s·ª≠ d·ª•ng th·ªùi l∆∞·ª£ng n√†y!', 'warning');
            }

            // G·ª° active c≈© v√† g√°n active m·ªõi
            document.querySelectorAll('.duration-btn').forEach(btn => btn.classList.remove('active'));
            e.target.classList.add('active');

            // L∆∞u l·∫°i v√†o projectData
            projectData.settings.duration = parseInt(dur, 10);
            console.log('‚è± duration set', projectData.settings.duration);
            return;
        }
    });
    const transitionSelect = document.getElementById('transition-select');
    if (transitionSelect) {
        transitionSelect.addEventListener('change', function () {
            const selectedOption = transitionSelect.options[transitionSelect.selectedIndex];
            const selectedText = selectedOption.textContent;
            const selectedValue = selectedOption.value;

            projectData.settings.transition = selectedValue;
            console.log(`üé¨ Hi·ªáu ·ª©ng chuy·ªÉn c·∫£nh ƒë√£ ch·ªçn: ${selectedText} (${selectedValue})`);
        });
    }
    const musicSelect = document.getElementById('music-select');
    if (musicSelect) {
        musicSelect.addEventListener('change', function () {
            const selectedOption = musicSelect.options[musicSelect.selectedIndex];
            const selectedText = selectedOption.textContent;
            const selectedValue = selectedOption.value;

            projectData.settings.music = selectedValue;
            console.log(`üéµ B·∫°n v·ª´a ch·ªçn: ${selectedText} (${selectedValue})`);
        });
    }
    document.getElementById('filter-gender')?.addEventListener('change', renderCharacterList);
    document.getElementById('filter-emotion')?.addEventListener('change', renderCharacterList);
    const select = document.getElementById('intro-select');
    const input = document.getElementById('intro-input');

    if (select && input) {
        select.addEventListener('change', () => {
            input.value = select.value;
        });
    }
    const upgradeBtn = document.querySelector(".upgrade-btn");
    if (upgradeBtn) {
        upgradeBtn.addEventListener("click", () => {
            window.location.href = "subscribe.html";
        });
    }
    const value = this.value;
    const video = document.getElementById("step5-video-preview");

    // ‚úÖ Check login
    // const token = localStorage.getItem('jwt');
    // if (!token) {
    //     window.location.href = "index.html"; // N·∫øu kh√¥ng c√≥ JWT ‚Üí redirect v·ªÅ trang ch√≠nh
    // }


    const token = localStorage.getItem('jwt');
    if (!token) {
        window.location.href = "index.html";
    } else {
        // G·ª≠i request x√°c th·ª±c token
        fetch(`${API_BASE_URL}/api/user`, {
            method: 'GET',
            headers: {
                'Authorization': `Bearer ${token}`
            }
        })
            .then(res => res.json())
            .then(data => {
                if (!data.success) {
                    // ‚ùå Token kh√¥ng h·ª£p l·ªá ‚Üí x√≥a v√† v·ªÅ trang login
                    localStorage.removeItem('jwt');
                    localStorage.removeItem('auth_data');
                    window.location.href = "index.html";
                } else {
                    // ‚úÖ Token h·ª£p l·ªá ‚Üí ti·∫øp t·ª•c
                    fillDataUser(data.user);
                }
            })
            .catch(err => {
                console.error("L·ªói x√°c th·ª±c token:", err);
                localStorage.removeItem('jwt');
                localStorage.removeItem('auth_data');
                window.location.href = "index.html";
            });
    }
    video.load();


    const scriptTextarea = document.getElementById("script-text");
    const introInput = document.getElementById("intro-input");
    // ‚úÖ Gi·ªõi h·∫°n 500 t·ª´ cho textarea script-text
    scriptTextarea?.addEventListener("input", () => {
        const text = scriptTextarea.value.trim();
        const words = text.length > 0 ? text.split(/\s+/) : [];
        // if (20 < words.length) {
        //     scriptTextarea.value = words.slice(0, 20).join(" ");
        //     showToast("Gi·ªõi h·∫°n t·ªëi thi·ªÉu 20 t·ª´ cho k·ªãch b·∫£n");
        // }
        if (words.length > 100) {
            scriptTextarea.value = words.slice(0, 100).join(" ");
            showToast("Gi·ªõi h·∫°n t·ªëi ƒëa 100 t·ª´ cho k·ªãch b·∫£n");
        }
    });

    // ‚úÖ Gi·ªõi h·∫°n 35 t·ª´ cho input intro
    introInput?.addEventListener("input", () => {
        const text = introInput.value.trim();
        const words = text.length > 0 ? text.split(/\s+/) : [];

        if (words.length > 35) {
            introInput.value = words.slice(0, 35).join(" ");
            showToast("Gi·ªõi h·∫°n t·ªëi ƒëa 35 t·ª´ cho c√¢u m·ªü ƒë·∫ßu");
        }
    });

    const btn = document.getElementById("sidebar-toggle");
    const sidebar = document.getElementById("sidebar");

    btn.addEventListener("click", () => {
        if (sidebar.style.display === "none") {
            sidebar.style.display = "block"; // Ho·∫∑c "flex", t√πy b·∫°n mu·ªën hi·ªán nh∆∞ th·∫ø n√†o
        } else {
            sidebar.style.display = "none";
        }
    });
    console.log('Tinovideo Dashboard initialized successfully!');

});

// let cachedUser = null;

// async function getUserInfoOnce() {
//     if (cachedUser) return cachedUser; // ‚úÖ Tr√°nh g·ªçi l·∫°i
// const authData = localStorage.getItem("auth_data");
//     if (authData) {
//         cachedUser = JSON.parse(authData);
//         return cachedUser;
//     }
//     const token = localStorage.getItem("jwt");
//     if (!token) return null;

//     try {
//         const res = await fetch(`${API_BASE_URL}/api/user`, {
//             method: "GET",
//             headers: { Authorization: `Bearer ${token}` }
//         });
//         const data = await res.json();
//         if (data.success) {
//             cachedUser = data.user;
//             localStorage.setItem("auth_data", JSON.stringify(data.user));
//             // localStorage.setItem('userId', data.user.id)
//             // localStorage.setItem('free_claimed ', data.user.free_claimed)
//             const nameDiv = document.querySelector('[data-key="user-name"]');
//             if (nameDiv) nameDiv.textContent = data.user.name;
//             const point = document.querySelector('[data-key="point"]');
//             if (point) point.textContent = data.user.point;
//             // (T√πy ch·ªçn) G√°n ·∫£nh ƒë·∫°i di·ªán
//             const avatarImg = document.querySelector('[data-key="user-avatar"]');
//             if (avatarImg) avatarImg.src = data.user.avatar;
//             const userPlan = document.querySelector('[data-key="user-plan"]');
//             if (userPlan) userPlan.textContent = data.user.plan;
//             return cachedUser;
//         } else {

//             console.warn("‚ùå Kh√¥ng l·∫•y ƒë∆∞·ª£c th√¥ng tin user:", data.error);
//             return null;
//         }
//     } catch (err) {
//         console.error("‚ùå L·ªói k·∫øt n·ªëi:", err);
//         return null;
//     }
// }


// function fillDataUser(user) {
//     auth_data = localStorage.getItem("auth_data")

//     const nameDiv = document.querySelector('[data-key="user-name"]');
//     if (nameDiv) nameDiv.textContent = auth_data.name;

//     const point = document.querySelector('[data-key="point"]');
//     if (point) point.textContent = auth_data.point;

//     const avatarImg = document.querySelector('[data-key="user-avatar"]');
//     if (avatarImg) avatarImg.src = auth_data.avatar;

//     const userPlan = document.querySelector('[data-key="user-plan"]');
//     if (userPlan) userPlan.textContent = auth_data.plan || "Ch∆∞a c√≥ g√≥i";
//     console.log("1",auth_data)
//        console.log("1",nameDiv)
//      console.log("1",avatarImg)
//      console.log("1",userPlan)
// }


function fillDataUser(user) {
    const nameDiv = document.querySelector('[data-key="user-name"]');
    if (nameDiv) nameDiv.textContent = user.name;

    const point = document.querySelector('[data-key="point"]');
    if (point) point.textContent = user.point;

    const avatarImg = document.querySelector('[data-key="user-avatar"]');
    if (avatarImg) avatarImg.src = user.avatar;

    const userPlan = document.querySelector('[data-key="user-plan"]');
    // if (userPlan) userPlan.textContent = user.plan || "Ch∆∞a c√≥ g√≥i";
    const claimedPlans = [
        user.free_claimed && "Free",
        user.standard_claimed && "Standard",
        user.pro_claimed && "Pro",
        user.max_claimed && "Max"
    ].filter(Boolean);

    let highestPlan = "Ch∆∞a c√≥ g√≥i";
    const PLAN_PRIORITY = ["Max", "Pro", "Standard", "Free"];
    for (const plan of PLAN_PRIORITY) {
        if (claimedPlans.includes(plan)) {
            highestPlan = plan;
            break;
        }
    }

    if (userPlan) userPlan.textContent = user.role;

    // console.log("‚úÖ User ƒë√£ fill:", user);
}

async function getUserInfoOnce() {

    const authData = localStorage.getItem("auth_data");
    if (authData) {
        cachedUser = JSON.parse(authData);
        fillDataUser(cachedUser);
        return cachedUser;
    }
    // console.log("‚úÖ User ƒë√£ fill:", authData);
    const token = localStorage.getItem("jwt");
    if (!token) return null;

    try {
        const res = await fetch(`${API_BASE_URL}/api/user`, {
            method: "GET",
            headers: { Authorization: `Bearer ${token}` }
        });
        const data = await res.json();
        if (data.success) {
            cachedUser = data.user;
            localStorage.setItem("auth_data", JSON.stringify(data.user));
            fillDataUser(cachedUser);  // ‚úÖ truy·ªÅn ƒë√∫ng user
            return cachedUser;
        } else {
            console.warn("‚ùå Kh√¥ng l·∫•y ƒë∆∞·ª£c th√¥ng tin user:", data.error);
            return null;
        }
    } catch (err) {
        console.error("‚ùå L·ªói k·∫øt n·ªëi:", err);
        return null;
    }
}

const SECTIONS = [
    "dashboard",
    "create",
    "projects",
    "templates",
    "affiliate",
    "settings",
    "help"
];
function showSection(name) {
    // 1Ô∏è‚É£ Show/Hide section
    SECTIONS.forEach(sec => {
        const el = document.getElementById(`${sec}-section`);
        if (!el) return;
        if (sec === name) el.classList.remove("hidden");
        else el.classList.add("hidden");
    });

    // 2Ô∏è‚É£ C·∫≠p nh·∫≠t class `.active` cho sidebar-item
    document.querySelectorAll(".sidebar-item").forEach(item => {
        const onclick = item.getAttribute("onclick") || "";
        const isActive = onclick.includes(`showSection('${name}')`);
        item.classList.toggle("active", isActive);
    });
}

// Kh·ªüi ƒë·ªông m·∫∑c ƒë·ªãnh
document.addEventListener("DOMContentLoaded", () => {
    showSection("create");

});
function waitForUserElementsThenFill(user) {
    const tryFill = () => {
        // const nameEl = document.getElementById("user-name");
        const avatarEl = document.getElementById("user-avatar");
        const pointEl = document.getElementById("user-point");

        if (nameEl && avatarEl && pointEl) {
            fillUserHeader(user);
            return true;
        }
        return false;
    };

    if (tryFill()) return;

    const observer = new MutationObserver(() => {
        if (tryFill()) observer.disconnect();
    });

    observer.observe(document.body, { childList: true, subtree: true });
}

window.addEventListener("DOMContentLoaded", async () => {
    let user = null;
    const cached = localStorage.getItem("auth_data");

    if (cached) {
        user = JSON.parse(cached);

        fillDataUser(user)
        try {
            user = JSON.parse(cached);
        } catch (e) {
            console.error("L·ªói parse auth_data:", e);
        }
    }

    if (!cached) {
        try {
            user = await getUserInfoOnce();
        } catch (e) {
            console.error("L·ªói getUserInfoOnce:", e);
        }
    }


});

